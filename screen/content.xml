<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-2.1.xsd"
        require-authentication="anonymous-view" allow-extra-path="true" default-menu-include="false" standalone="true">

    <always-actions>
        <!-- TODO: make this configurable, perhaps through a productStoreGroupId constant instead of productStoreId constant -->
        <set field="productStoreId" value="POPC_DEFAULT"/>
        <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore" cache="true"/>
        <set field="wikiSpaceId" from="productStore?.wikiSpaceId"/>
    </always-actions>

    <transition name="config.js" read-only="true">
        <parameter name="productStoreId"/>
        <actions>
            <script><![CDATA[
                Map storeInfo = ec.service.sync().name("popstore.StoreServices.get#StoreInfo").parameter("productStoreId", productStoreId).call()
                if (ec.user.username) { try { storeInfo.apiKey = ec.user.getLoginKey() } catch (Exception e) { } }
                storeInfo.moquiSessionToken = ec.web.sessionToken
                String partyId = (ec.user.username ? ec.user.userAccount?.partyId : null) ?: ec.web.sessionAttributes.customerPartyId
                if (partyId) { storeInfo.customerInfo = ec.service.sync().name("popstore.CustomerServices.get#CustomerInfo").call() }
                String storeInfoJson = groovy.json.JsonOutput.toJson(storeInfo)
                String jsText = """
var storeInfo = ${storeInfoJson};
\$.extend(storeConfig, storeInfo.productStore, storeInfo.settings);
"""
                ec.web.sendTextResponse(jsText, "application/javascript", null)
            ]]></script>
        </actions>
        <default-response type="none"/>
    </transition>
    
    <transition name="attachment" read-only="true"><actions>
        <set field="extraPathNameList" from="new ArrayList(sri.screenUrlInfo.extraPathNameList)"/>
        <if condition="!extraPathNameList"><script>ec.web.sendError(404, null, null)</script></if>
        <set field="filename" from="extraPathNameList.remove(extraPathNameList.size()-1)"/>
        <service-call name="org.moqui.impl.WikiServices.get#WikiPageAttachment" out-map="context"
                      in-map="[wikiSpaceId:wikiSpaceId, pagePath:extraPathNameList?.join('/'), filename:filename]"/>
        <script>ec.web.sendResourceResponse(attachmentReference?.location, true)</script>
    </actions><default-response type="none"/></transition>
    <transition name="productImage" read-only="true">
        <parameter name="productContentId"/>
        <actions>
            <set field="extraPathNameList" from="sri.screenUrlInfo.extraPathNameList"/>
            <if condition="extraPathNameList &amp;&amp; !productContentId">
                <set field="productContentId" from="extraPathNameList[0]"/></if>
            <entity-find-one entity-name="mantle.product.ProductContent" value-field="productContent" cache="true">
                <field-map field-name="productContentId"/></entity-find-one>
            <if condition="productContent == null"><then>
                <!-- NOTE: consider returning a default image instead of 404 -->
                <script>ec.web.sendError(404, null, null)</script>
            </then><else>
                <script>ec.web.sendResourceResponse(productContent.contentLocation, true)</script>
            </else></if>
        </actions>
        <default-response type="none"/>
    </transition>

    <actions>
        <set field="extraPathNameList" from="sri.screenUrlInfo.extraPathNameList"/>
        <service-call name="org.moqui.impl.WikiServices.get#PublishedWikiPageText" out-map="context"
                      in-map="[wikiSpaceId:wikiSpaceId, pagePath:extraPathNameList?.join('/'), versionName:ver]"/>
        <!-- TODO: consider removing versionName:ver above in production so only published versions can be seen -->
    </actions>
    <widgets>
        <section name="PageTextSection" condition="pageText">
            <widgets><label text="${pageText}" type="div" style="content-page" encode="false"/></widgets>
            <fail-widgets>
                <label text="Sorry, we couldn't find that page!" type="h2" style="text-center"/>
            </fail-widgets>
        </section>
    </widgets>
</screen>
