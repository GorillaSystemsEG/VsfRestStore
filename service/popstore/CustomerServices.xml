<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!-- Login and Register for eCommerce -->

    <service verb="login" noun="Customer">
        <in-parameters>
            <parameter name="username" required="true"/>
            <parameter name="password" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="apiKey"/>
            <parameter name="moquiSessionToken"/>
            <parameter name="customerInfo" type="Map"/>
            <parameter name="forcePasswordChange"/>
        </out-parameters>
        <actions>
            <set field="forcePasswordChange" value="false" type="Boolean"/>
            <entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" cache="false">
                <field-map field-name="username"/></entity-find-one>
            <if condition="userAccount?.requirePasswordChange == 'Y'">
                <set field="forcePasswordChange" value="true" type="Boolean"/>
                <return/>
            </if>


            <script>ec.user.loginUser(username, password)</script>

            <if condition="ec.user.userAccount != null">
                <set field="customerPartyId" from="ec.user.userAccount.partyId"/>
                <!-- NOTE: use the web session for attributes such as cartOrderId for security; this won't work in a stateless mode or outside a web session -->
                <set field="sessionAttributes" from="ec.web.sessionAttributes"/>
                <set field="sessionAttributes.customerPartyId" from="customerPartyId"/>
                <set field="cartOrderId" from="ec.web.sessionAttributes.cartOrderId"/>

                <!-- see if there is an open order for user and get that ID into session -->
                <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="existingOrderList">
                    <econdition field-name="statusId" value="OrderOpen"/>
                    <econdition field-name="customerPartyId"/>
                    <select-field field-name="orderId"/><select-field field-name="orderPartSeqId"/>
                    <order-by field-name="-entryDate"/><!-- get most recent open order -->
                </entity-find>
                <if condition="existingOrderList"><then>
                    <if condition="cartOrderId">
                        <!-- if a cartOrderId is in the session, merge its items into the existing order -->
                        <service-call name="mantle.order.OrderServices.merge#OrderItems"
                                in-map="[orderId:existingOrderList[0].orderId, fromOrderId:cartOrderId]"/>
                    </if>
                    <!-- whether there was one in the session or not always set the existing orderId there -->
                    <set field="sessionAttributes.cartOrderId" from="existingOrderList[0].orderId"/>
                </then><else>
                    <!-- no existing open order, if a cartOrderId is in the session set the logged in user as the customer -->
                    <if condition="cartOrderId">
                        <!-- NOTE: make sure cartOrder has no customerPartyId, ie only find those with null to avoid order takeover -->
                        <entity-find entity-name="OrderPart" list="orderPartList">
                            <econdition field-name="orderId" from="cartOrderId"/>
                            <econdition field-name="customerPartyId" operator="is-null"/>
                        </entity-find>
                        <if condition="orderPartList">
                            <set field="orderPart" from="orderPartList[0]"/>
                            <set field="orderPart.customerPartyId" from="customerPartyId"/>
                            <entity-update value-field="orderPart"/>
                        </if>
                    </if>
                </else></if>

                <!-- create the login key to return -->
                <set field="apiKey" from="ec.user.getLoginKey()"/>
                <set field="moquiSessionToken" from="ec.web.sessionToken"/>

                <!-- get customer info for convenience -->
                <service-call name="popstore.CustomerServices.get#CustomerInfo" out-map="customerInfo"/>
            </if>
        </actions>
    </service>

    <!-- Login with facebook -->
    <service verb="loginFB" noun="Customer">
        <in-parameters>
            <parameter name="firstName" required="true"/>
            <parameter name="lastName" required="true"/>
            <parameter name="email" required="true"/>
        </in-parameters>
        <out-parameters>
            <!-- <parameter name="apiKey"/> -->
            <parameter name="moquiSessionToken" />
        </out-parameters>
        <actions>
            <script>
                import org.moqui.impl.context.UserFacadeImpl
                import com.restfb.*
                import com.restfb.types.User
                import com.restfb.exception.FacebookException

                User fbUser = new User()
                fbUser.firstName = firstName
                fbUser.lastName = lastName
                fbUser.email = email

                ec.artifactExecution.disableAuthz()
                if (ec.entity.find("moqui.security.UserAccount").condition("username", fbUser.email).count() == 0) {
                    // no UserAccount for the email and we should create one with corresponding party
                    Map partiesByEmail = ec.service.sync().name("popstore.CustomerServices.find#PartyByEmail")
                            .parameters(emailAddress: fbUser.email).call();
                    def partyId
                    Set partyIds = partiesByEmail.partyIds;
                    if (!partyIds) {
                        Map personRes = ec.service.sync().name("mantle.party.PartyServices.create#Person")
                                .parameters([firstName: fbUser.firstName, lastName: fbUser.lastName, roleTypeId: "Customer"]).call()
                        partyId = personRes.partyId
                        ec.service.sync().name("mantle.party.ContactServices.create#EmailAddress")
                                .parameters(emailAddress: fbUser.email, partyId: partyId, contactMechPurposeId: "EmailPrimary").call()
                    } else {
                        partyId = partyIds.first();
                    }
                    ec.service.sync().name("mantle.party.PartyServices.create#PartyUserAccount")
                            .parameters([partyId: partyId, emailAddress: fbUser.email]).call()
                }
                UserFacadeImpl userFacade = ec.user as UserFacadeImpl
                userFacade.internalLoginUser(fbUser.email)
            </script>
            <set field="moquiSessionToken" from="ec.web.sessionToken"/>
        </actions>
    </service>

    <service verb="find" noun="PartyByEmail">
        <description>Try to find parties who have specified emails and return list of party ids. We expect that
        the list will have just one entry. A few parties with the same emails probably are duplicates. The first id
        on the list belongs to a party where specified email was registered last.</description>
        <in-parameters>
            <parameter name="emailAddress" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyIds" type="Set"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.party.contact.PartyContactMechInfo" list="partyInfoList" distinct="true">
                <econdition field-name="infoString" from="emailAddress" ignore-if-empty="true" ignore-case="true"/>
                <econdition field-name="contactMechTypeEnumId" value="CmtEmailAddress"/>
                <date-filter />
                <select-field field-name="partyId"/><select-field field-name="infoString"/>
                <order-by field-name="fromDate DESC"/>
            </entity-find>
            <set field="partyIds" from="[] as Set"/>
            <iterate list="partyInfoList" entry="partyInfo">
                <entity-find-count entity-name="mantle.party.Party" count-field="isDisabled">
                    <econdition field-name="partyId" from="partyInfo.partyId"/>
                    <econdition field-name="disabled" value="Y" ignore-case="true"/>
                </entity-find-count>
                <if condition="isDisabled==0">
                    <set field="partyIds" from="partyIds + [partyInfo.partyId]"/>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="reset" noun="Password" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="username"/>
        </in-parameters>
        <out-parameters>
            <parameter name="response"/>
        </out-parameters>
        <actions>
            <service-call name="org.moqui.impl.UserServices.reset#Password" in-map="[username: username]" 
                out-map="response"/>
        </actions>
    </service>

    <service verb="logout" noun="Customer" authenticate="anonymous-all">
        <actions>
            <script>ec.user.logoutUser()</script>
        </actions>
    </service>
    
    <service verb="register" noun="Customer" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="firstName" required="true"/><parameter name="middleName"/><parameter name="lastName" required="true"/>

            <parameter name="emailAddress" required="true"><text-email/></parameter>
            <parameter name="username" default="emailAddress"/>
            <parameter name="newPassword" required="true"/>
            <parameter name="newPasswordVerify" required="true"/>

            <parameter name="currencyUomId"/><parameter name="locale"/><parameter name="timeZone"/>
        </in-parameters>
        <out-parameters>
            <parameter name="emailContactMechId"/>
            <parameter name="apiKey"/>
            <parameter name="moquiSessionToken"/>
            <parameter name="customerInfo" type="Map"/>
        </out-parameters>
        <actions>
            <!-- create account and login -->
            <service-call name="mantle.party.PartyServices.create#Account" in-map="context + [roleTypeId:'Customer', loginAfterCreate:false]"/>

            <if condition="ec.user.userAccount != null">
                <set field="customerPartyId" from="ec.user.userAccount.partyId"/>
                <!-- NOTE: use the web session for attributes such as cartOrderId for security; this won't work in a stateless mode or outside a web session -->
                <set field="sessionAttributes" from="ec.web.sessionAttributes"/>
                <set field="sessionAttributes.customerPartyId" from="customerPartyId"/>
                <set field="cartOrderId" from="sessionAttributes.cartOrderId"/>

                <!-- if a cartOrderId is in the session set the logged in user as the customer -->
                <if condition="cartOrderId">
                    <!-- NOTE: make sure cartOrder has no customerPartyId, ie only find those with null to avoid order takeover -->
                    <entity-find entity-name="OrderPart" list="orderPartList">
                        <econdition field-name="orderId" from="cartOrderId"/>
                        <econdition field-name="customerPartyId" operator="is-null"/>
                    </entity-find>
                    <if condition="orderPartList">
                        <set field="orderPart" from="orderPartList[0]"/>
                        <set field="orderPart.customerPartyId" from="customerPartyId"/>
                        <entity-update value-field="orderPart"/>
                    </if>
                </if>

                <!-- create the login key to return -->
                <set field="apiKey" from="ec.user.getLoginKey()"/>
                <set field="moquiSessionToken" from="ec.web.sessionToken"/>

                <!-- get customer info for convenience -->
                <service-call name="popstore.CustomerServices.get#CustomerInfo" out-map="customerInfo"/>
            </if>
        </actions>
    </service>

    <!-- General Customer Info -->

    <service verb="get" noun="CustomerInfo">
        <out-parameters>
            <parameter name="userId"/><parameter name="partyId"/><parameter name="username"/>
            <parameter name="firstName"/><parameter name="middleName"/><parameter name="lastName"/>
            <parameter name="locale"/><parameter name="timeZone"/><parameter name="disabled"/>
            <parameter name="emailAddress"/><parameter name="telecomNumber"/>
        </out-parameters>
        <actions>
            <!-- NOTE: use the web session for attributes such as customerPartyId for security; this won't work in a stateless mode or outside a web session -->
            <set field="sessionAttributes" from="ec.web.sessionAttributes"/>

            <set field="userId" from="ec.user.userId"/>
            <set field="partyId" from="ec.user.userAccount?.partyId ?: sessionAttributes.customerPartyId"/>
            <if condition="!partyId"><return message="No active customer"/></if>

            <!-- TODO: handle Organization type parties, use more liberal view-entity and support 'organizationName' instead of firstName/lastName in the UI -->
            <entity-find-one entity-name="mantle.party.PersonAndUserAccount" value-field="personAndUserAccount"/>
            <script>context.putAll(personAndUserAccount)</script>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" in-map="[partyId:partyId, telecomContactMechPurposeId: 'PhonePrimary', emailContactMechPurposeId:'EmailPrimary']" out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="Customer">
        <in-parameters>
            <parameter name="partyId"/>
            <parameter name="userId"/>
            <parameter name="username"/>
            <parameter name="firstName"/>
            <parameter name="lastName"/>
            <parameter name="middleName"/>
            <parameter name="emailAddress"/>
            <parameter name="contactMechId"/>
            <parameter name="contactNumber"/>
            <parameter name="locale"/>
            <parameter name="timeZone"/>
        </in-parameters>
        <out-parameters>
            <parameter name="customerInfo" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>
            <if condition="!customerPartyId"><return message="No active customer"/></if>
            <set field="partyId" from="customerPartyId"/>
            <set field="orderId" from="cartOrderId"/>

            <service-call name="mantle.party.PartyServices.update#Account" in-map="context"/>

            <service-call name="mantle.party.ContactServices.store#PartyContactInfo" in-map="[partyId:partyId, telecomContactMechPurposeId: 'PhonePrimary', contactNumber: contactNumber, contactMechId: contactMechId]"
                out-map="context"/>

            <service-call name="popstore.CustomerServices.get#CustomerInfo" out-map="customerInfo"/>
        </actions>
    </service>

    <service verb="update" noun="CustomerPassword" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="userId"/>
            <parameter name="username"/>
            <parameter name="oldPassword"/>
            <parameter name="newPassword"/>
            <parameter name="newPasswordVerify"/>
        </in-parameters>
        <actions>
            <service-call name="org.moqui.impl.UserServices.update#Password" in-map="context"/>
        </actions>
    </service>

    <!-- Payment Methods -->

    <service verb="get" noun="PaymentMethods">
        <out-parameters>
            <parameter name="methodInfoList" type="List"><parameter name="methodInfo" type="Map"/></parameter>
        </out-parameters>
        <actions>
            <!-- NOTE: use the web session for attributes such as customerPartyId for security; this won't work in a stateless mode or outside a web session -->
            <set field="sessionAttributes" from="ec.web.sessionAttributes"/>
            <set field="partyId" from="ec.user.userAccount?.partyId ?: sessionAttributes.customerPartyId"/>
            <if condition="!partyId"><return message="No active customer"/></if>

            <service-call name="mantle.account.PaymentMethodServices.get#PartyPaymentMethodInfoList"
                    in-map="[partyId:partyId]" out-map="context"/>
        </actions>
    </service>
    <service verb="store" noun="CreditCard">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.method.PaymentMethod" include="nonpk"/>
            <parameter name="paymentMethodId"/>
            <parameter name="paymentMethodTypeEnumId" default-value="PmtCreditCard"/>

            <parameter name="cardNumber"><credit-card/></parameter><!-- not required because often empty on update, ie for public facing masked cards -->
            <parameter name="validateSecurityCode"><description>Not persisted, just passed through so available to SECA rules for validation by gateway, etc</description></parameter>
            <parameter name="expireMonth"/>
            <parameter name="expireYear"/>
            <parameter name="creditCardTypeEnumId"/>
            <parameter name="cardSecurityCode"/>
            <parameter name="expireDate" default-value="${expireMonth?:''}/${expireYear?:''}">
                <time-range after="now" format="MM/yyyy"/></parameter>

            <parameter name="postalContactMechId"/>
            <parameter name="postalContactMechPurposeId" default-value="PostalBilling"/>
            <auto-parameters entity-name="mantle.party.contact.PostalAddress" include="nonpk"/>
            <parameter name="toName" default="companyNameOnAccount ?: (firstNameOnAccount ? firstNameOnAccount + ' ' + lastNameOnAccount : null)"/>
            <parameter name="attnName" default="companyNameOnAccount &amp;&amp; firstNameOnAccount ? firstNameOnAccount + ' ' + lastNameOnAccount : null"/>

            <parameter name="telecomContactMechId"/>
            <parameter name="telecomContactMechPurposeId" default-value="PhoneBilling"/>
            <auto-parameters entity-name="mantle.party.contact.TelecomNumber" include="nonpk"/>
            <parameter name="areaCode"><text-digits/></parameter>
            <parameter name="contactNumber"><matches regexp="^\d\d[-\. \d]*\d\d$" message="Please enter a valid phone number"/></parameter>

            <parameter name="emailContactMechId"/>
            <parameter name="emailContactMechPurposeId" default-value="EmailBilling"/>
            <parameter name="emailAddress"><text-email/></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentMethodId"/>
            <parameter name="postalContactMechId"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="emailContactMechId"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>
            <if condition="!customerPartyId"><return message="No active customer"/></if>
            <set field="partyId" from="customerPartyId"/>
            <set field="orderId" from="cartOrderId"/>

            <!-- TODO: if no customerPartyId call service to create one now and set in session (no user account aka 'anonymous') -->

            <service-call name="mantle.account.PaymentMethodServices.store#PaymentMethodInfo" in-map="context" out-map="context"/>

            <!-- TODO: for CIM setups do anything here for CIM storage failure? -->
        </actions>
    </service>

    <service verb="delete" noun="paymentMethod">
        <in-parameters>
            <parameter name="paymentMethodId"/>
        </in-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>
            <if condition="!customerPartyId"><return message="No active customer"/></if>
            <set field="partyId" from="customerPartyId"/>
            <set field="orderId" from="cartOrderId"/>

            <service-call name="mantle.account.PaymentMethodServices.delete#PaymentMethod" in-map="context"/>
        </actions>
    </service>

    <!-- Shipping Addresses -->

    <service verb="get" noun="ShippingAddresses">
        <out-parameters>
            <parameter name="postalAddressList" type="List"><parameter name="postalAddressInfo" type="Map"/></parameter>
        </out-parameters>
        <actions>
            <!-- NOTE: use the web session for attributes such as customerPartyId for security; this won't work in a stateless mode or outside a web session -->
            <set field="sessionAttributes" from="ec.web.sessionAttributes"/>
            <set field="partyId" from="ec.user.userAccount?.partyId ?: sessionAttributes.customerPartyId"/>
            <if condition="!partyId"><return message="No active customer"/></if>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfoList" out-map="shippingContactListInfo"
                    in-map="[partyId:partyId, postalContactMechPurposeId:'PostalShippingDest']"/>

            
            <set field="postalAddressList" from="shippingContactListInfo.postalAddressList"/>
        </actions>
    </service>

    <service verb="store" noun="ShippingAddress">
        <in-parameters>
            <parameter name="postalContactMechId"/>
            <parameter name="postalContactMechPurposeId" default-value="PostalShippingDest"/>
            <auto-parameters entity-name="mantle.party.contact.PostalAddress" include="nonpk"/>
            <parameter name="address1" required="true"/>
            <parameter name="postalCode" required="true"/>

            <parameter name="telecomContactMechId"/>
            <parameter name="telecomContactMechPurposeId"/>
            <auto-parameters entity-name="mantle.party.contact.TelecomNumber" include="nonpk"/>
            <parameter name="countryCode"><text-digits/></parameter>
            <parameter name="areaCode"><text-digits/></parameter>
            <parameter name="contactNumber"><matches regexp="^\d\d[-\. \d]*\d\d$" message="Please enter a valid phone number"/></parameter>
            <parameter name="telecomExtension"><text-digits/></parameter>
            <parameter name="telecomAllowSolicitation"/>

            <parameter name="emailContactMechId"/>
            <parameter name="emailContactMechPurposeId"/>
            <parameter name="emailAddress"><text-email/></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="postalContactMechId"/>
            <parameter name="telecomContactMechId"/>
            <parameter name="emailContactMechId"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>
            <if condition="!customerPartyId"><return message="No active customer"/></if>
            <set field="partyId" from="customerPartyId"/>
            <set field="orderId" from="cartOrderId"/>

            <!-- TODO: if no customerPartyId call service to create one now and set in session (no user account aka 'anonymous') -->

            <service-call name="mantle.party.ContactServices.store#PartyContactInfo" in-map="context" out-map="context"/>

            <!-- TODO: if address verification/validation available call explicitly so customer knows of potential issues right away -->
        </actions>
    </service>

    <service verb="delete" noun="ShippingAddress">
        <in-parameters>
            <parameter name="contactMechId"/>
            <parameter name="contactMechPurposeId"/>
        </in-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>
            <if condition="!customerPartyId"><return message="No active customer"/></if>
            <set field="partyId" from="customerPartyId"/>
            <set field="orderId" from="cartOrderId"/>

            <service-call name="mantle.party.ContactServices.delete#PartyContactMech" in-map="context"/>
        </actions>
    </service>

</services>
