<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="ProductInfo">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="priceUomId"/>
            <parameter name="locale"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters entity-name="mantle.product.Product" include="nonpk"/>

            <parameter name="price" type="BigDecimal"/>
            <parameter name="listPrice" type="BigDecimal"/>
            <parameter name="priceUomId"/>

            <parameter name="productClassDescription"/>
            <parameter name="descriptionLong"/>
            <parameter name="contentList" type="List"><parameter name="content" type="Map">
                <parameter name="productContentId"/><parameter name="productContentTypeEnumId"/>
                <parameter name="description"/><parameter name="sequenceNum"/>
            </parameter></parameter>

            <parameter name="standardFeatureList" type="List"><parameter name="dimension" type="Map"/></parameter>
            <parameter name="dimensionList" type="List"><parameter name="dimension" type="Map"/></parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
            <if condition="product == null"><return error="true" message="Product not found with ID ${productId}"/></if>
            <script>context.putAll(product)</script>

            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>
            <if condition="productStoreId">
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>
                <if condition="!priceUomId"><set field="priceUomId" from="productStore?.defaultCurrencyUomId"/></if>
                <set field="vendorPartyId" from="productStore?.organizationPartyId"/>
            </if>
            <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                    in-map="[productId:productId, priceUomId:priceUomId, productStoreId:productStoreId,
                        vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>
            <set field="price" from="priceMap.price"/>
            <set field="listPrice" from="priceMap.listPrice"/>
            <set field="priceUomId" from="priceMap.priceUomId"/>

            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="productClassEnum">
                <field-map field-name="enumId" from="product.productClassEnumId"/></entity-find-one>
            <set field="productClassDescription" from="productClassEnum?.description"/>

            <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="standardFeatureList" cache="true">
                <date-filter/><econdition field-name="productId"/>
                <econdition field-name="applTypeEnumId" value="PfatStandard"/>
                <order-by field-name="productFeatureTypeEnumId"/><order-by field-name="description"/>
            </entity-find>

            <entity-find entity-name="mantle.product.ProductDimensionAndType" list="dimensionList" cache="true">
                <econdition field-name="productId"/><order-by field-name="description"/></entity-find>

            <entity-find entity-name="mantle.product.ProductContent" list="contentList" cache="true">
                <date-filter/><econdition field-name="productId"/>
                <order-by field-name="sequenceNum,-fromDate"/>
            </entity-find>
            <if condition="locale">
                <!-- filter after by locale to streamline cached find -->
                <set field="langLocale" from="locale.contains('_') ? locale.substring(locale.indexOf('_')) : null"/>
                <set field="contentList" from="contentList.findAll({ it.locale == null || it.locale == locale || it.locale == langLocale })"/>
            </if>
            <!-- some content types may have more than one record, long description just has one -->
            <set field="descLongLocation" from="contentList.find({ 'PcntDescriptionLong' == it.productContentTypeEnumId })?.contentLocation"/>
            <if condition="descLongLocation"><set field="descriptionLong" from="ec.resource.getLocationText(descLongLocation, true)"/></if>
            <!-- <set field="imageSmallList" from="contentList.findAll({ 'PcntImageSmall' == it.productContentTypeEnumId })"/> -->
        </actions>
    </service>

    <service verb="find" noun="ProductAvailability">
        <description>
            Create collection of product ids with availability flag.
        </description>
        <in-parameters>
            <parameter name="productStoreId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productAvailability"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>
            <set field="inventoryFacilityIds" type="List" from="[productStore.inventoryFacilityId]"/>
            <entity-find entity-name="mantle.product.store.ProductStoreFacility" list="productStoreFacilities">
                <econdition field-name="productStoreId"/>
                <date-filter/>
            </entity-find>
            <iterate list="productStoreFacilities" entry="productStoreFacility">
                <set field="inventoryFacilityIds" from="inventoryFacilityIds + productStoreFacility.facilityId"/>
            </iterate>
            <entity-find entity-name="mantle.product.asset.AssetSummaryView" list="productAssetSumList">
                <econdition field-name="productAssetTypeEnumId" value="AstTpInventory"/>
                <econdition field-name="facilityId" operator="in" from="inventoryFacilityIds"/>
                <having-econditions combine="or">
                    <econdition field-name="quantityOnHandTotal" operator="not-equals" from="0.0"/>
                    <econdition field-name="availableToPromiseTotal" operator="not-equals" from="0.0"/>
                </having-econditions>
                <select-field field-name="productId"/>
                <select-field field-name="availableToPromiseTotal"/>
            </entity-find>
            <set field="productAvailability" from="[:]"/>
            <iterate list="productAssetSumList" entry="assetSum">
                <script>
                    productAvailability.put(assetSum.productId, assetSum.availableToPromiseTotal>0)
                </script>
            </iterate>
        </actions>
    </service>


    <service verb="get" noun="ProductVariantsDisplayInfo">
        <in-parameters>
            <parameter name="productId">
                <description>Only id of a virtual product make sense to get relevant data.</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="variantOptions" type="Map">
                <description>
                    A map where key is feature type (Enumeration) and value is another map
                    with productId, description and price data exactly as it returned by get#ProductPrice.
                </description>
            </parameter>
            <parameter name="minimalPrice" type="BigDecimal">
                <description>Minimal price among all variants.</description>
            </parameter>
            <parameter name="maximalPrice" type="BigDecimal">
                <description>Maximal price among all variants.</description>
            </parameter>
            <parameter name="isDiscounted" type="Boolean">
                <description>We use this flag in UI to emphasis discounted products if they are variants</description>
            </parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>

            <set field="variantOptions" type="NewMap" value="null"/>
            <script>variantOptions = new HashMap()</script>
            <set field="minimalPrice" type="BigDecimal" value="0"/>
            <set field="maximalPrice" type="BigDecimal" value="0"/>
            <set field="isDiscounted" type="Boolean" value="false"/>

            <service-call name="mantle.product.PriceServices.get#ProductPrice" in-map="context" out-map="mainPriceSet" />

            <if condition="product &amp;&amp; product.productTypeEnumId == 'PtVirtual'">
                <entity-find entity-name="mantle.product.ProductAssocAndToFeatureAppl" list="assocs">
                    <econdition field-name="productAssocTypeEnumId" value="PatVariant"/>
                    <econdition field-name="applTypeEnumId" operator="in" value="PfatDistinguishing, PfatStandard" />
                    <econdition field-name="productId" from="product.productId"/>
                    <date-filter/>
                </entity-find>
                <iterate list="assocs" entry="variantProductAssoc">
                    <!-- find variant price first -->
                    <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceSet"
                            in-map="context + [productId:variantProductAssoc.toProductId]" />
                    <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="features">
                        <date-filter/>
                        <econdition field-name="productId" from="variantProductAssoc.toProductId"/>
                        <econdition field-name="productFeatureId" from="variantProductAssoc.productFeatureId"/>
                    </entity-find>

                    <!-- we return map keyed by feature type and should find the proper value for the assoc -->
                    <entity-find-one entity-name="mantle.product.feature.ProductFeature" value-field="productFeature" cache="true">
                        <field-map field-name="productFeatureId" from="variantProductAssoc.productFeatureId"/>
                    </entity-find-one>
                    <entity-find-one entity-name="moqui.basic.Enumeration" value-field="featureType" cache="true">
                        <field-map field-name="enumId" from="productFeature.productFeatureTypeEnumId"/>
                    </entity-find-one>
                    <script><![CDATA[
                        selectedPrices = (priceSet.price != null && priceSet != 0) ? priceSet : mainPriceSet
                        // we use this flag in UI to emphasis discounted products but important to know if any of variants of discounted
                        if (!isDiscounted) {
                            isDiscounted = (selectedPrices.price && selectedPrices.listPrice) ? selectedPrices.price < selectedPrices.listPrice : false
                        }
                        def optionSet = variantOptions.get(featureType)
                        if (!optionSet) {
                            variantOptions.put(featureType, [[productId: variantProductAssoc.toProductId, description:productFeature.description,
                            prices:selectedPrices]])
                        } else {
                            optionSet.add([productId: variantProductAssoc.toProductId, description:productFeature.description,
                            prices:selectedPrices])
                        }
                        priceSet = null
                    ]]></script>
                </iterate>

                <!-- sort variants by price and store minimal price -->
                <script><![CDATA[
                    variantOptions.each{k, v ->
                        Collections.sort(v, new Comparator<Map>() {
                            int compare(Map m1, Map m2) {
                                def price1 = m1.prices.price?:0
                                def price2 = m2.prices.price?:0
                                return price1.compareTo(price2)
                            }
                        })
                        minimalPrice = v.get(0).prices.price
                        maximalPrice = v.get(v.size() - 1).prices.price
                    }
                ]]></script>

                <else>
                    <set field="minimalPrice" type="BigDecimal" from="mainPriceSet.price"/>
                    <set field="maximalPrice" type="BigDecimal" from="mainPriceSet.price"/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ProductReview" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="productId"/>
            <parameter name="productRating"/>
            <parameter name="productReview"/>
        </in-parameters>
        <actions>
            <service-call name="create#mantle.product.ProductReview"
                in-map="context + [userId:(ec.user.userId ?: '_NA_'), statusId:'PrvwApproved',
                postedAnonymous:(ec.user.userId ? 'N' : 'Y'), postedDateTime:ec.user.nowTimestamp]"/>
        </actions>
    </service>

    <service verb="get" noun="ProductReviews">
        <in-parameters>
            <parameter name="productId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productReviewList" type="List"><parameter name="review" type="Map"/></parameter>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.product.ProductReview" list="productReviewList">
                <econdition field-name="productId"/>
                <econdition field-name="statusId" value="PrvwApproved"/>
            </entity-find>
        </actions>
    </service>

    <service verb="search" noun="Products">
        <in-parameters>
            <parameter name="term"/>
            <parameter name="productCategoryId"/>
            <parameter name="productFeatureIds" type="List"><parameter name="productFeatureId"/></parameter>
            <parameter name="priceUomId"/>
            <parameter name="locale"/>

            <parameter name="orderByFields" type="List"><parameter name="orderByField"/></parameter>
            <parameter name="pageIndex" type="Integer" default="0"/>
            <parameter name="pageSize" type="Integer" default="20"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productList" type="List"><parameter name="productInfo" type="Map"/></parameter>
            <parameter name="productListCount" type="Integer"><description>The total count of hits, not just the limited number returned.</description></parameter>
            <parameter name="productListPageIndex" type="Integer"/>
            <parameter name="productListPageSize" type="Integer"/>
            <parameter name="productListPageMaxIndex" type="Integer"/>
            <parameter name="productListPageRangeLow" type="Integer"/>
            <parameter name="productListPageRangeHigh" type="Integer"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>
            <if condition="productStoreId">
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore" cache="true"/>
                <if condition="!priceUomId"><set field="priceUomId" from="productStore?.defaultCurrencyUomId"/></if>
                <set field="vendorPartyId" from="productStore?.organizationPartyId"/>
            </if>
            <set field="productStoreId" from="productStoreId ?: ec.web.sessionAttributes.productStoreId"/>
            <!-- TODO: if no productStoreId lookup somehow? should be set from initial call to content/config.js transition -->

            <if condition="!productCategoryId &amp;&amp; productStoreId">
                <entity-find entity-name="mantle.product.store.ProductStoreCategory" list="searchPscList" cache="true">
                    <date-filter/><econdition field-name="productStoreId"/>
                    <econdition field-name="storeCategoryTypeEnumId" value="PsctSearch"/>
                </entity-find>
                <set field="productCategoryId" from="searchPscList?.first()?.productCategoryId"/>
                <if condition="!productCategoryId">
                    <entity-find entity-name="mantle.product.store.ProductStoreCategory" list="searchPscList" cache="true">
                        <date-filter/><econdition field-name="productStoreId"/>
                        <econdition field-name="storeCategoryTypeEnumId" value="PsctViewAllow"/>
                    </entity-find>
                    <set field="productCategoryId" from="searchPscList?.first()?.productCategoryId"/>
                </if>
            </if>

            <if condition="!productCategoryId"><return type="danger" message="No search category found"/></if>

            <!-- TODO/FUTURE: better handling of search input for more natural results -->
            <if condition="term"><set field="term" from="term.split(' ').collect({ (!it || it in ['AND', 'OR', 'NOT'] || it.contains('*')) ? it : it + '*' }).join(' ')"/></if>
            <set field="queryString" from="(term ? term + ' AND ' : '') + 'categories.productCategoryId:' + productCategoryId"/>

            <service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="searchOut"
                    in-map="[queryString:queryString, indexName:'popc', documentType:'PopcProduct', pageIndex:pageIndex, pageSize:pageSize]"/>
            <set field="productList" from="searchOut.documentList"/>
            <set field="productListCount" from="searchOut.documentListCount"/>
            <set field="productListPageIndex" from="searchOut.documentListPageIndex"/>
            <set field="productListPageSize" from="searchOut.documentListPageSize"/>
            <set field="productListPageMaxIndex" from="searchOut.documentListPageMaxIndex"/>
            <set field="productListPageRangeLow" from="searchOut.documentListPageRangeLow"/>
            <set field="productListPageRangeHigh" from="searchOut.documentListPageRangeHigh"/>

            <!-- get prices, small/medium image info for products -->
            <iterate list="productList" entry="productInfo">
                <set field="productInfo.productName" from="productInfo.name"/>

                <!-- TODO: would be more efficient to pull prices from the doc, filter by date, store, etc, etc, like: "prices": [ { "price": 11119.99, "priceTypeEnumId": "PptCurrent", "pricePurposeEnumId": "PppPurchase", "priceFromDate": 1265184000000, "priceUomId": "USD" } ] -->
                <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap" out-map-add-to-existing="false"
                        in-map="[productId:productInfo.productId, priceUomId:priceUomId, productStoreId:productStoreId,
                                vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>
                <set field="productInfo.price" from="priceMap.price"/>
                <set field="productInfo.listPrice" from="priceMap.listPrice"/>
                <set field="productInfo.priceUomId" from="priceMap.priceUomId"/>

                <set field="smallImageInfo" from="null"/>
                <set field="mediumImageInfo" from="null"/>
                <entity-find entity-name="mantle.product.ProductContent" list="productContentList" cache="true">
                    <date-filter/><econdition field-name="productId" from="productInfo.productId"/>
                    <order-by field-name="sequenceNum,-fromDate"/>
                </entity-find>
                <if condition="locale">
                    <!-- filter after by locale to streamline cached find -->
                    <set field="langLocale" from="locale.contains('_') ? locale.substring(locale.indexOf('_')) : null"/>
                    <set field="productContentList" from="productContentList.findAll({ it.locale == null || it.locale == locale || it.locale == langLocale })"/>
                </if>
                <if condition="productContentList">
                    <!-- medium can be PcntImageMedium or PcntImageLarge -->
                    <set field="mediumImageInfo" from="productContentList.find({ 'PcntImageMedium'.equals(it.productContentTypeEnumId) })"/>
                    <if condition="mediumImageInfo == null">
                        <set field="mediumImageInfo" from="productContentList.find({ 'PcntImageLarge'.equals(it.productContentTypeEnumId) })"/></if>
                    <!-- small can be PcntImageSmall or from medium we just looked up -->
                    <set field="smallImageInfo" from="productContentList.find({ 'PcntImageSmall'.equals(it.productContentTypeEnumId) })"/>
                    <if condition="smallImageInfo == null"><set field="smallImageInfo" from="mediumImageInfo"/></if>
                </if>

                <if condition="smallImageInfo != null"><set field="productInfo.smallImageInfo" from="smallImageInfo"/></if>
                <if condition="mediumImageInfo != null"><set field="productInfo.mediumImageInfo" from="mediumImageInfo"/></if>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="CategoryInfo">
        <in-parameters>
            <parameter name="productCategoryId" required="true"/>
            <parameter name="locale"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters entity-name="mantle.product.category.ProductCategory" include="nonpk"/>
            <parameter name="subCategoryList" type="List"><parameter name="categoryInfo" type="Map"/></parameter>
        </out-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>

            <entity-find-one entity-name="mantle.product.category.ProductCategory" value-field="productCategory" cache="true"/>
            <if condition="productCategory == null"><return error="true" message="Category not found with ID ${productCategoryId}"/></if>
            <script>context.putAll(productCategory)</script>

            <entity-find entity-name="mantle.product.category.ProductCategoryRollup" list="rollupList" cache="true">
                <date-filter/><econdition field-name="parentProductCategoryId" from="productCategoryId"/>
                <order-by field-name="sequenceNum"/>
            </entity-find>

            <set field="subCategoryList" from="[]"/>
            <iterate list="rollupList" entry="rollup">
                <entity-find-one entity-name="mantle.product.category.ProductCategory" value-field="productCategory" cache="true">
                    <field-map field-name="productCategoryId" from="rollup.productCategoryId"/></entity-find-one>
                <!-- TODO: ProductCategoryContent for smallImageInfo -->
                <script>subCategoryList.add([productCategoryId:productCategory.productCategoryId, pseudoId:productCategory.pseudoId,
                        categoryName:productCategory.categoryName, description:productCategory.description,
                        smallImageInfo:smallImageInfo, sequenceNum:rollup.sequenceNum])</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="CategoryProducts">
        <in-parameters>
            <parameter name="productCategoryId" required="true"/>
            <parameter name="priceUomId"/>
            <parameter name="locale"/>
            <parameter name="orderBy" default-value="sequenceNum"/>
            <parameter name="pageIndex" type="Integer" default="0"/>
            <parameter name="pageSize" type="Integer" default="20"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productList" type="List"><parameter name="productInfo" type="Map">
                <parameter name="productId"/><parameter name="pseudoId"/><parameter name="productName"/><parameter name="description"/>
                <parameter name="price" type="BigDecimal"/><parameter name="listPrice" type="BigDecimal"/><parameter name="priceUomId"/>
                <parameter name="sequenceNum" type="Long"/>
                <parameter name="smallImageInfo" type="Map"/><parameter name="mediumImageInfo" type="Map"/>
            </parameter></parameter>
            <parameter name="productList" type="List"><parameter name="document" type="Map"/></parameter>
            <parameter name="productListCount" type="Integer"><description>The total count of hits, not just the
                limited number returned.</description></parameter>
            <parameter name="productListPageIndex" type="Integer"/>
            <parameter name="productListPageSize" type="Integer"/>
            <parameter name="productListPageMaxIndex" type="Integer"/>
            <parameter name="productListPageRangeLow" type="Integer"/>
            <parameter name="productListPageRangeHigh" type="Integer"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>
            <if condition="productStoreId">
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore" cache="true"/>
                <if condition="!priceUomId"><set field="priceUomId" from="productStore?.defaultCurrencyUomId"/></if>
                <set field="vendorPartyId" from="productStore?.organizationPartyId"/>
            </if>

            <!-- get entire cached list then paginate, for huge numbers of products in a category this is a bad approach (such sites should probably be purely search based) -->
            <!-- use the name 'productList' so pagination out-parameters are created automatically -->
            <entity-find entity-name="mantle.product.category.ProductCategoryMember" list="productList" cache="true">
                <search-form-inputs default-order-by="${orderBy}"/>
                <date-filter/><econdition field-name="productCategoryId"/>
            </entity-find>
            <set field="pcmList" from="productList"/>

            <set field="productList" from="[]"/>
            <iterate list="pcmList" entry="pcmp">
                <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                    <field-map field-name="productId" from="pcmp.productId"/></entity-find-one>

                <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap" out-map-add-to-existing="false"
                        in-map="[productId:pcmp.productId, priceUomId:priceUomId, productStoreId:productStoreId,
                                vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>

                <set field="smallImageInfo" from="null"/>
                <set field="mediumImageInfo" from="null"/>
                <entity-find entity-name="mantle.product.ProductContent" list="productContentList" cache="true">
                    <date-filter/><econdition field-name="productId" from="pcmp.productId"/>
                    <order-by field-name="sequenceNum,-fromDate"/>
                </entity-find>
                <if condition="locale">
                    <!-- filter after by locale to streamline cached find -->
                    <set field="langLocale" from="locale.contains('_') ? locale.substring(locale.indexOf('_')) : null"/>
                    <set field="productContentList" from="productContentList.findAll({ it.locale == null || it.locale == locale || it.locale == langLocale })"/>
                </if>
                <if condition="productContentList">
                    <!-- medium can be PcntImageMedium or PcntImageLarge -->
                    <set field="mediumImageInfo" from="productContentList.find({ 'PcntImageMedium'.equals(it.productContentTypeEnumId) })"/>
                    <if condition="mediumImageInfo == null">
                        <set field="mediumImageInfo" from="productContentList.find({ 'PcntImageLarge'.equals(it.productContentTypeEnumId) })"/></if>
                    <!-- small can be PcntImageSmall or from medium we just looked up -->
                    <set field="smallImageInfo" from="productContentList.find({ 'PcntImageSmall'.equals(it.productContentTypeEnumId) })"/>
                    <if condition="smallImageInfo == null"><set field="smallImageInfo" from="mediumImageInfo"/></if>
                </if>

                <script>productList.add([productId:pcmp.productId, pseudoId:product.pseudoId, productName:product.productName,
                        description:product.description, price:priceMap.price, listPrice:priceMap.listPrice, priceUomId:priceMap.priceUomId,
                        sequenceNum:pcmp.sequenceNum, smallImageInfo:smallImageInfo, mediumImageInfo:mediumImageInfo])</script>
            </iterate>
        </actions>
    </service>
</services>
