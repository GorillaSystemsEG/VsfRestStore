<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="get" noun="ProductStoreId">
        <description>
            Get the ProductStoreId fast.

            If the productStoreId has already been set for the web session, return that.
            Otherwise use the requestHostName from the web session or the requestHostName parameter (required).
            Search for the productStoreId from the requestHostName.
            First search for a match ProductStore with a ProductStoreSetting with type PsstHostname.
            Then, if not found, throw an error.
        </description>
        <in-parameters>
            <parameter name="requestHostName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productStoreId"/>
        </out-parameters>
        <actions>
            <set field="productStoreId" default-value="POPC_DEFAULT"/>
            <return/>

            <!-- TODO: Get multiple stores working and not hard coded -->
            <set field="requestHostName" from="requestHostName ?: ec.web.sessionAttributes.requestHostName"/>

            <if condition="ec.web.sessionAttributes.productStoreId">
                <set field="productStoreId" from="ec.web.sessionAttributes.productStoreId"/>
                <return type="success" message="productStoreId already set in sessionAttributes"/>
            </if>

            <if condition="!ec.web.sessionAttributes.requestHostName || ec.web.sessionAttributes.requestHostName != requestHostName">
                <set field="ec.web.sessionAttributes.requestHostName" from="requestHostName"/>
            </if>

            <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="hostSettingList">
                <econdition field-name="settingTypeEnumId" value="PsstHostname"/>
                <econdition field-name="settingValue" from="requestHostName"/>
                <date-filter/>
                <order-by field-name="-fromDate"/>
            </entity-find>

            <if condition="hostSettingList?.size() &gt; 1"><log level="error" message="Found more than one ProductStore with ProductStoreSetting with type PsstHostname found for hostname ${requestHostName}. Only one hostname is supported."/></if>

            <set field="ec.web.sessionAttributes.productStoreId" from="hostSettingList?.getFirst()?.productStoreId"/>

            <if condition="!ec.web.sessionAttributes.productStoreId"><log level="error" message="No ProductStore with ProductStoreSetting with type PsstHostname found for hostname ${requestHostName}"/></if>

            <set field="productStoreId" from="ec.web.sessionAttributes.productStoreId"/>
        </actions>
    </service>

    <service verb="get" noun="LightBootstrap">
        <in-parameters>
            <parameter name="requestHostName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <service-call name="popstore.StoreServices.get#StoreInfo" in-map="[productStoreId:productStoreId]" out-map="storeInfo"/>
            <set field="productStore" from="storeInfo.productStore"/>
            <set field="wikiSpaceId" from="productStore?.wikiSpaceId"/>

            <!-- lookup configured browse root category from storeInfo -->
            <set field="browseRootCategory" from="storeInfo.categoryByType.PsctBrowseRoot"/>
            <set field="browseRootCategoryId" from="browseRootCategory?.productCategoryId"/>
            <!-- get browseRootCategoryInfo for subCategoryList used in header, etc -->
            <if condition="browseRootCategoryId">
                <service-call name="popstore.ProductServices.get#CategoryInfo" out-map="browseRootCategoryInfo"
                              in-map="[productCategoryId:browseRootCategoryId]"/>
            </if>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>

<!--            <log level="warn" message="browseRootCategoryInfo?.subCategoryList ${browseRootCategoryInfo?.subCategoryList}"/>-->

            <set field="psdata" from="[ menuItems:[] ]"/>
            <iterate list="browseRootCategoryInfo?.subCategoryList" entry="category">
                <script>psdata.menuItems.add([
                        id: category?.productCategoryId,
                        slug: category?.productCategoryId,
                        label: category?.categoryName
                    ]);</script>
            </iterate>

            <log level="warn" message="get#LightBootstrap"/>
<!--            <log level="warn" message="LightBootstrap context ${browseRootCategory.toString()}"/>-->
        </actions>
    </service>
    <service verb="get" noun="FeaturedProducts">
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <!-- Best Selling (Featured) Category -->
            <entity-find entity-name="mantle.product.store.ProductStoreCategory" list="featPscList" cache="true">
                <date-filter/><econdition field-name="productStoreId"/>
                <econdition field-name="storeCategoryTypeEnumId" value="PsctFeatured"/>
            </entity-find>
            <if condition="featPscList">
                <service-call name="popstore.ProductServices.get#CategoryProducts" out-map="featCatProdOut"
                              in-map="[productCategoryId:featPscList[0].productCategoryId]"/>
                <set field="featureProductList" from="featCatProdOut.productList"/>
            </if>

            <!-- Start Prestashop Stuff -->
<!--            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopFeaturedProducts.json',false))"/>-->
            <set field="code" from="200"/>

            <set field="psdata" from="[]"/>
            <iterate list="featureProductList" entry="product">
                <script>psdata.add([
                        id_product: product?.productId,
                        name: product?.productName,
                        link_rewrite: product?.productId,
                        regular_price_amount: product?.listPrice,
                        price_amount: product?.price,
                        cover: [url: "${ec.web.requestUrl.minus(ec.web.request.requestURI)}/store/content/productImage/${product?.mediumImageInfo?.productContentId ?: product?.smallImageInfo?.productContentId}"]
                    ]);</script>
            </iterate>

            <log level="warn" message="get#FeaturedProducts"/>
<!--            <log level="warn" message="FeaturedProducts context ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="get" noun="CategoryProducts">
        <in-parameters>
            <parameter name="id_category"/>
            <parameter name="slug"/>
            <parameter name="q"/>
            <parameter name="page"/>
            <parameter name="with_all_images"/>
            <parameter name="with_category_tree"/>
            <!--            <parameter name="image_size"/>-->
            <!--            <parameter name="resultsPerPage"/>-->
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
<!--            <log level="warn" message="page ${page}"/>-->
<!--            <log level="warn" message="q ${q.split('-|/').minus(q.split('/').collect{it.split('-')}.collect{it[0]})}"/>-->

            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <set field="categoryId" from="slug"/>
            <service-call name="popstore.ProductServices.get#CategoryProducts" out-map="products"
                          in-map="[productCategoryId:categoryId, orderBy: orderBy, pageIndex:page?page-1: '0', pageSize:12]"/>

            <service-call name="popstore.StoreServices.get#StoreInfo" in-map="[productStoreId:productStoreId]" out-map="storeInfo"/>
            <set field="productStore" from="storeInfo.productStore"/>
            <set field="wikiSpaceId" from="productStore?.wikiSpaceId"/>

            <!-- lookup configured browse root category from storeInfo -->
            <set field="browseRootCategory" from="storeInfo.categoryByType.PsctBrowseRoot"/>
            <set field="browseRootCategoryId" from="browseRootCategory?.productCategoryId"/>
            <!-- get browseRootCategoryInfo for subCategoryList used in header, etc -->
            <if condition="browseRootCategoryId">
                <service-call name="popstore.ProductServices.get#CategoryInfo" out-map="browseRootCategoryInfo"
                              in-map="[productCategoryId:browseRootCategoryId]"/>
            </if>

            <!-- Get ProductFeatures for the Products in the ProductCategory Specified -->
            <if condition="!q">
                <then>
                    <set field="productsFiltered" from="products?.productList"/>
                    <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="pfaaList">
                        <date-filter/>
                        <econdition field-name="productId" operator="in" from="products?.productList?.productId"/>
                        <order-by field-name="typeDescription,sequenceNum,description"/>
                    </entity-find>
                </then>
                <else>
                    <set field="descriptionList" from="q.split('-|/').minus(q.split('/').collect{it.split('-')}.collect{it[0]})"/>
<!--                    <log level="warn" message="descriptionList ${descriptionList}"/>-->
                    <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="pfaaList">
                        <date-filter/>
                        <econdition field-name="productId" operator="in" from="products?.productList?.productId"/>
                        <order-by field-name="typeDescription,sequenceNum,description"/>
                    </entity-find>
<!--                    <log level="warn" message="pfaaList ${pfaaList}"/>-->
                    <set field="productsFiltered" from="[]"/>
                    <iterate list="products?.productList" entry="product">
                        <if condition="pfaaList?.productId?.contains(product.productId)">
                            <script>productsFiltered.add(product)</script>
                        </if>
                    </iterate>
                </else>
            </if>

            <!-- Start Prestashop Stuff -->
            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopCategoryProducts.json',false))"/>
            <set field="code" from="200"/>
            <script>
                def moquiToPrestashopCategory(category) {
                    return [
                        id: category?.productCategoryId,
                        link: "https://moqui.org/en/0-${category?.productCategoryId}",
                        name: category?.categoryName,
                        desc: category?.categoryDescription,
                        children: category?.subCategoryList?.collect { subCategory -> moquiToPrestashopCategory(subCategory) }
                    ]
                }
            </script>
            <set field="psdata" from="[ products:[], pagination:[current_page: products?.productListPageIndex+1,total_items: products?.productListCount,pages_count: products?.productListPageMaxIndex+1], facets:[], categories:moquiToPrestashopCategory(browseRootCategoryInfo) ]"/>
            <iterate list="productsFiltered" entry="product">
                <script>psdata.products.add([
                    id_product: product?.productId,
                    name: product?.productName,
                    link_rewrite: product?.productId,
                    regular_price_amount: product?.listPrice,
                    price_amount: product?.price,
                    cover: [url: "${ec.web.requestUrl.minus(ec.web.request.requestURI).substring(0, ec.web.requestUrl.minus(ec.web.request.requestURI).lastIndexOf('?'))}/store/content/productImage/${product?.mediumImageInfo?.productContentId ?: product?.smallImageInfo?.productContentId}"]
                    ]);</script>
            </iterate>
            <iterate list="pfaaList" entry="productFeatureAndAppl">
                <if condition="!psdata?.facets?.find{it.id == productFeatureAndAppl.productFeatureTypeEnumId}">
                    <script>psdata.facets.add([
                        id: productFeatureAndAppl?.productFeatureTypeEnumId,
                        displayed: true,
                        label: productFeatureAndAppl?.typeDescription,
                        filters: [],
                        multipleSelectionAllowed: true,
                        widgetType: "checkbox"
                        ]);</script>
                </if>
                <if condition="!psdata?.facets?.find{it.id == productFeatureAndAppl.productFeatureTypeEnumId}.filters.find{it.id == productFeatureAndAppl?.productFeatureId}">
                    <script>psdata?.facets?.find{it.id == productFeatureAndAppl.productFeatureTypeEnumId}.filters.add([
                        id: productFeatureAndAppl?.productFeatureId,
                        label: productFeatureAndAppl?.description,
                        type: "attribute_group",
                        active: false,
                        magnitude: pfaaList?.productFeatureId?.findAll{it == productFeatureAndAppl?.productFeatureId}.size()
                        ]);</script>
                </if>
            </iterate>
<!--            <set field="psdata.sort_orders" from="data?.psdata?.sort_orders"/>-->
<!--            <set field="psdata.sort_selected" from="data?.psdata?.sort_selected"/>-->

            <log level="warn" message="get#CategoryProducts"/>
<!--            <log level="warn" message="get#CategoryProducts context ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="get" noun="ProductDetail">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="product_id"/>
            <parameter name="image_type"/>
            <parameter name="refresh"/>
            <parameter name="id_customization"/>
            <parameter name="group"/>
            <parameter name="with_all_images"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
<!--            <log level="warn" message="product_id ${product_id}"/>-->
<!--            <log level="warn" message="refresh ${refresh}"/>-->
<!--            <log level="warn" message="group ${ec.web.getRequestParameters()}"/>-->

<!--            <iterate list="group" entry="member">-->
<!--                <log level="warn" message="member ${member}"/>-->
<!--            </iterate>-->

            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <set field="productId" from="product_id"/>
            <service-call name="popstore.ProductServices.get#ProductInfo" out-map="product" in-map="[productId:productId]"/>

<!--            <log level="warn" message="product ${product.toString()}"/>-->

            <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="pfaaList">
                <date-filter/>
                <econdition field-name="productId" from="product?.productId"/>
                <order-by field-name="typeDescription,sequenceNum,description"/>
            </entity-find>

            <!-- Start Prestashop Stuff -->
<!--            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopProductDetail.json',false))"/>-->

            <set field="code" from="200"/>
            <set field="imageUrl" value="${ec.web.requestUrl.minus(ec.web.request.requestURI).substring(0, ec.web.requestUrl.minus(ec.web.request.requestURI).lastIndexOf('?'))}/store/content/productImage/${product?.contentList?.getFirst()?.productContentId}"/>
            <set field="psdata" from="[
                id_product: product?.productId,
                name: product?.productName,
                float_price: product?.price,
                images: [],
                cover_image: imageUrl,
                description: product?.descriptionLong,
                description_short: product?.descriptionSmall ?: product?.description ?: product?.descriptionLong,
                product_info: [],
                manufacturer_name: 'Brand Manufacture Name',
                category_name: 'Category Name',
                groups: pfaaList?.productFeatureTypeEnumId?.groupBy{it}
                ]"/>
            <set field="psdata.images" from="[]"/>
            <iterate list="product?.contentList" entry="content">
                <if condition="content?.productContentId &amp;&amp; content?.productContentTypeEnumId?.contains('Image')">
                    <script>psdata.images.add(src: "${ec.web.requestUrl.minus(ec.web.request.requestURI).substring(0, ec.web.requestUrl.minus(ec.web.request.requestURI).lastIndexOf('?'))}/store/content/productImage/${content?.productContentId}")</script>
                </if>
            </iterate>
            <iterate list="psdata.groups" entry="group">
                <set field="psdata.groups[group.key]" from="[
                    name: pfaaList?.find{it.productFeatureTypeEnumId == group.key}?.typeDescription,
                    group_type: 'select',
                    attributes: pfaaList?.findAll{it.productFeatureTypeEnumId == group.key}?.productFeatureId?.groupBy{it}
                    ]"/>
                <iterate list="psdata.groups[group.key].attributes" entry="attribute">
                    <set field="psdata.groups[group.key].attributes[attribute.key]" from="[
                        name: pfaaList?.find{it.productFeatureId == attribute.key}?.description,
                        selected: false
                        ]"/>
                </iterate>
            </iterate>
<!--            <log level="warn" message="psdata ${psdata}"/>-->

<!--            <set field="psdata" from="data?.psdata"/>-->
            <log level="warn" message="get#ProductDetail"/>
        </actions>
    </service>
    <service verb="list" noun="Comments">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="id_product"/>
            <parameter name="page"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
<!--            <log level="warn" message="id_product ${id_product}"/>-->
<!--            <log level="warn" message="page ${page}"/>-->

            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <set field="productId" from="id_product"/>
            <service-call name="popstore.ProductServices.get#ProductReviews" out-map="reviewsList" in-map="[productId:productId]"/>

<!--            <log level="warn" message="reviewsList ${reviewsList.toString()}"/>-->

            <!-- Start Prestashop Stuff -->
<!--            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopListComments.json',false))"/>-->
            <set field="code" from="200"/>
            <set field="psdata" from="[ comments_nb:reviewsList?.productReviewList?.size(), comments_per_page: '5', comments:[]]"/>
            <iterate list="reviewsList?.productReviewList" entry="review">
                <if condition="review?.userId">
                    <entity-find-one entity-name="mantle.party.PersonAndUserAccount" value-field="personUserAccount">
                        <field-map field-name="userId" from="review.userId"/>
                    </entity-find-one>
                </if>
                <script>psdata.comments.add([
                    id_product_comment: review?.productReviewId,
                    firstname: personUserAccount?.firstName ?: 'Anonymous',
                    lastname: personUserAccount?.lastName ?: '',
                    date_add: ec.l10n.format(review?.postedDateTime,'MM/dd/yy hh:mm a'),
                    content: review?.productReview,
                    grade: review?.productRating
                    ])</script>
<!--                <log level="warn" message="psdata ${ec.l10n.format(review?.postedDateTime,'MM/dd/yy HH:mm a')?.getClass()}"/>-->
            </iterate>
<!--            <log level="warn" message="psdata last ${psdata.toString()}"/>-->

<!--            <set field="psdata" from="data?.psdata"/>-->
            <log level="warn" message="list#Comments"/>
<!--            <log level="warn" message="context ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="get" noun="ProductSearch">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="s"/>
            <parameter name="resultsPerPage"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <set field="searchParameter" from="s"/>
            <service-call name="popstore.SearchServices.search#All" out-map="context"
                          in-map="[searchParameter:searchParameter, productStoreId:productStoreId, pageIndex:pageIndex ? pageIndex : '0', pageSize:resultsPerPage?:'12']"/>

            <!-- Start Prestashop Stuff -->
            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopProductSearch.json',false))"/>
            <set field="code" from="200"/>
            <set field="psdata" from="[ products:[] ]"/>
            <iterate list="productSearchResults?.productList" entry="product">
                <script>psdata.products.add([
                    id_product: product?.productId,
                    name: product?.productName,
                    link_rewrite: product?.productId,
                    regular_price_amount: product?.listPrice,
                    price_amount: product?.price,
                    cover: [url: "${ec.web.requestUrl.minus(ec.web.request.requestURI).substring(0, ec.web.requestUrl.minus(ec.web.request.requestURI).lastIndexOf('?'))}/store/content/productImage/${product?.mediumImageInfo?.productContentId ?: product?.smallImageInfo?.productContentId}"]
                    ]);</script>
<!--                <log level="warn" message="product ${product?.toString()}"/>-->
            </iterate>

<!--            <log level="warn" message="psdata ${psdata.toString()}"/>-->

<!--            <set field="psdata" from="data?.psdata"/>-->
            <set field="code" from="data?.code"/>
            <log level="warn" message="get#ProductSearch"/>
<!--            <log level="warn" message="context ${context.toString()}"/>-->
        </actions>
    </service>
    <service verb="get" noun="AddressForm">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="s"/>
            <parameter name="resultsPerPage"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>


            <!-- Start Prestashop Stuff -->
            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopAddressForm.json',false))"/>
<!--            <set field="code" from="200"/>-->
<!--            <set field="psdata" from="[ products:[] ]"/>-->
<!--            <iterate list="productSearchResults?.productList" entry="product">-->
<!--                <script>psdata.products.add([-->
<!--                    id_product: product?.productId,-->
<!--                    name: product?.productName,-->
<!--                    link_rewrite: product?.productId,-->
<!--                    regular_price_amount: product?.listPrice,-->
<!--                    price_amount: product?.price,-->
<!--                    cover: [url: "${ec.web.requestUrl.minus(ec.web.request.requestURI).substring(0, ec.web.requestUrl.minus(ec.web.request.requestURI).lastIndexOf('?'))}/store/content/productImage/${product?.mediumImageInfo?.productContentId ?: product?.smallImageInfo?.productContentId}"]-->
<!--                    ]);</script>-->
<!--                &lt;!&ndash;                <log level="warn" message="product ${product?.toString()}"/>&ndash;&gt;-->
<!--            </iterate>-->

            <!--            <log level="warn" message="psdata ${psdata.toString()}"/>-->

            <set field="psdata" from="data?.psdata"/>
            <set field="code" from="data?.code"/>
            <log level="warn" message="get#ProductSearch"/>
            <!--            <log level="warn" message="context ${context.toString()}"/>-->

<!--            <set field="psdata" from="data?.psdata"/>-->
            <log level="warn" message="get#AddressForm"/>
        </actions>
    </service>

    <service verb="get" noun="Cart">
        <in-parameters>
            <parameter name="update"/>
            <parameter name="id_product"/>
            <parameter name="id_product_attribute"/>
            <parameter name="delete"/>
            <parameter name="op"/>
            <parameter name="action"/>
            <parameter name="image_size"/>
            <parameter name="qty"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <log level="warn" message="id_product ${id_product}"/>
            <log level="warn" message="id_product_attribute ${id_product_attribute}"/>
            <log level="warn" message="qty ${qty}"/>

            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <set field="productId" from="id_product"/>
            <set field="quantity" from="qty"/>
            <service-call name="popstore.CartServices.add#Product" out-map="addOut"
                          in-map="[productId:productId, quantity:quantity, currencyUomId:currencyUomId, productStoreId: productStoreId]"/>
            <set field="addedCorrect" from="addOut?.orderHeader != null"/>



            <!-- Start Prestashop Stuff -->
            <!--            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopCart.json',false))"/>-->
            <set field="code" from="200"/>
            <set field="psdata" from="[ products:[] ]"/>
            <iterate list="addOut?.orderItemList" entry="orderItem">

<!--                <script>psdata.products.add([-->
<!--                    id_product: ,-->
<!--                    id_product_attribute: ,-->
<!--                    attributes_array: [],-->
<!--                    name: ,-->
<!--                    image_url: ,-->
<!--                    price_without_reduction: ,-->
<!--                    price: ,-->
<!--                    cart_quantity: product?.listPrice,-->
<!--                    reference: product?.price-->
<!--                    ]);</script>-->
                <log level="warn" message="orderItem ${orderItem?.productId?.toString()}"/>
            </iterate>

            <!--            <log level="warn" message="psdata ${psdata.toString()}"/>-->


            <!--            <set field="psdata" from="data?.psdata"/>-->
            <log level="warn" message="get#Cart"/>
            <log level="warn" message="context ${context.toString()}"/>
        </actions>
    </service>
    <service verb="get" noun="AccountInfo">
        <in-parameters>
            <parameter name="menu_with_images"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopAccountInfo.json',false))"/>
            <set field="code" from="data?.code"/>
            <set field="success" from="data?.success"/>
            <set field="psdata" from="data?.psdata"/>
            <log level="warn" message="get#AccountInfo"/>
        </actions>
    </service>
    <service verb="post" noun="AccountEdit">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="email"><text-email/></parameter>
            <parameter name="firstName"/>
            <parameter name="lastName"/>
            <parameter name="password"/>
            <parameter name="gender"/>
            <parameter name="new_password"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopAccountEdit.json',false))"/>
            <set field="code" from="data?.code"/>
            <set field="success" from="data?.success"/>
            <set field="psdata" from="data?.psdata"/>
            <log level="warn" message="get#AccountEdit"/>
        </actions>
    </service>
    <service verb="post" noun="Address">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="alias"/>
            <parameter name="postcode"/>
            <parameter name="address1"/>
            <parameter name="id_country"/>
            <parameter name="country"/>
            <parameter name="id_state"/>
            <parameter name="city"/>
            <parameter name="company"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopAddress.json',false))"/>
            <set field="code" from="data?.code"/>
            <set field="success" from="data?.success"/>
            <set field="psdata" from="data?.psdata"/>
            <log level="warn" message="get#AccountEdit"/>
        </actions>
    </service>
    <service verb="get" noun="OrderHistory">
        <in-parameters>
            <parameter name="menu_with_images"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopOrderHistory.json',false))"/>
            <set field="code" from="data?.code"/>
            <set field="success" from="data?.success"/>
            <set field="psdata" from="data?.psdata"/>
            <log level="warn" message="get#OrderHistory"/>
        </actions>
    </service>
    <service verb="get" noun="AllAddresses">
        <in-parameters>
            <parameter name="menu_with_images"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopAllAddresses.json',false))"/>
            <set field="code" from="data?.code"/>
            <set field="success" from="data?.success"/>
            <set field="psdata" from="data?.psdata"/>
            <log level="warn" message="get#AllAddresses"/>
        </actions>
    </service>
    <service verb="register" noun="Customer" authenticate="anonymous-all">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="email"><text-email/></parameter>
            <parameter name="firstName"/>
            <parameter name="lastName"/>
            <parameter name="password"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopRegister.json',false))"/>
            <set field="code" from="data?.code"/>
            <set field="success" from="data?.success"/>
            <set field="psdata" from="data?.psdata"/>
            <log level="warn" message="register#Customer ${data}"/>
        </actions>
    </service>
    <service verb="login" noun="Customer">
        <in-parameters>
            <parameter name="email"><text-email/></parameter>
            <parameter name="username" required="true" default="email"/>
            <parameter name="password" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopLogin.json',false))"/>
            <set field="code" from="data?.code"/>
            <set field="success" from="data?.success"/>
            <set field="psdata" from="data?.psdata"/>
        </actions>
    </service>
    <service verb="logout" noun="Customer" authenticate="anonymous-all">
        <actions>
            <script>ec.user.logoutUser()</script>
        </actions>
    </service>

</services>

