<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="get" noun="ProductStoreId">
        <description>
            Get the ProductStoreId fast.

            If the productStoreId has already been set for the web session, return that.
            Otherwise use the requestHostName from the web session or the requestHostName parameter (required).
            Search for the productStoreId from the requestHostName.
            First search for a match ProductStore with a ProductStoreSetting with type PsstHostname.
            Then, if not found, throw an error.
        </description>
        <in-parameters>
            <parameter name="productStoreId"/>
            <parameter name="requestHostName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productStoreId"/>
            <parameter name="productStore"/>
        </out-parameters>
        <actions>
            <!-- TODO: Get the productStoreId from the Hostname -->
            <set field="sessionAttributes" from="ec.web.sessionAttributes"/>
            <if condition="!sessionAttributes.productStoreId &amp;&amp; productStoreId">
                <set field="sessionAttributes.productStoreId" from="productStoreId"/>
            </if>
            <set field="productStoreId" from="productStoreId ?: sessionAttributes.productStoreId"/>

            <if condition="!productStoreId"><return message="Product Store Id is Required" type="danger" error="true"/></if>

            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore" cache="true"/>

            <return/>

            <!-- TODO: Get multiple stores working and not hard coded -->
            <set field="requestHostName" from="requestHostName ?: ec.web.sessionAttributes.requestHostName"/>

            <if condition="ec.web.sessionAttributes.productStoreId">
                <set field="productStoreId" from="ec.web.sessionAttributes.productStoreId"/>
                <return type="success" message="productStoreId already set in sessionAttributes"/>
            </if>

            <if condition="!ec.web.sessionAttributes.requestHostName || ec.web.sessionAttributes.requestHostName != requestHostName">
                <set field="ec.web.sessionAttributes.requestHostName" from="requestHostName"/>
            </if>

            <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="hostSettingList">
                <econdition field-name="settingTypeEnumId" value="PsstHostname"/>
                <econdition field-name="settingValue" from="requestHostName"/>
                <date-filter/>
                <order-by field-name="-fromDate"/>
            </entity-find>

            <if condition="hostSettingList?.size() &gt; 1"><log level="error" message="Found more than one ProductStore with ProductStoreSetting with type PsstHostname found for hostname ${requestHostName}. Only one hostname is supported."/></if>

            <set field="ec.web.sessionAttributes.productStoreId" from="hostSettingList?.getFirst()?.productStoreId"/>

            <if condition="!ec.web.sessionAttributes.productStoreId"><log level="error" message="No ProductStore with ProductStoreSetting with type PsstHostname found for hostname ${requestHostName}"/></if>

            <set field="productStoreId" from="ec.web.sessionAttributes.productStoreId"/>
        </actions>
    </service>

    <service verb="get" noun="LightBootstrap">
        <in-parameters>
            <parameter name="requestHostName"/>
            <parameter name="productStoreId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="context" out-map="context"/>

            <set field="dataDocument" from="productStore?.storeDataDocuments?.find{it.typeEnumId == 'PsdtCategory'}?.dataDocument"/>
            <set field="queryString" value="*"/>
            <set field="storeCategoryTypeEnumId" value="PsctBrowseRoot"/>
            <!-- TODO: Find a way to make this readable and take up less lines -->
            <script><![CDATA[
                nestedQueryMap = [parents:"""{
                        "bool":{
                            "must":[
                                {"range":
                                    {"parents.fromDate":{"lte":${ec.user.nowTimestamp.time}} }
                                },
                                {"bool":
                                    {"should":[
                                        {"range":
                                            {"parents.thruDate":{"gte":${ec.user.nowTimestamp.time}} }
                                        },
                                        {"bool":
                                            {"must_not":{"exists":{"field":"parents.thruDate"}}}
                                        }
                                    ]}
                                },
                                {
									"nested": {
										"path": "parents.storeCategories",
										"query": {
											"bool": {
												"must": [
													{
														"match": {
															"parents.storeCategories.productStoreId": "${productStoreId}"
														}
													},
													{
														"match": {
															"parents.storeCategories.storeCategoryTypeEnumId": "${storeCategoryTypeEnumId}"
														}
													},
													{
														"range": {
															"parents.storeCategories.fromDate": {
																"lte": ${ec.user.nowTimestamp.time}
															}
														}
													},
													{
														"bool": {
															"should": [
																{
																	"range": {
																		"parents.storeCategories.thruDate": {
																			"gte": ${ec.user.nowTimestamp.time}
																		}
																	}
																},
																{
																	"bool": {
																		"must_not": {
																			"exists": {
																				"field": "parents.storeCategories.thruDate"
																			}
																		}
																	}
																}
															]
														}
													}
												]
											}
										}
									}
                                }
                            ]
                        }
                    }"""]
                ]]></script>
            <entity-find-one entity-name="moqui.entity.document.DataDocument" value-field="dataDocument" cache="true">
                <field-map field-name="dataDocumentId" value="PopcCategory"/></entity-find-one>
            <service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="searchOut"
                          in-map="[queryString:queryString, nestedQueryMap:nestedQueryMap, indexName:dataDocument?.indexName,
                        documentType:dataDocument?.dataDocumentId, pageIndex:pageIndex, pageSize:pageSize, orderByFields:[], flattenDocument:false]"/>

            <!-- Sort the categories by the parent category's sequenceNum -->
            <iterate list="searchOut?.documentList" entry="category">
                <script>category.put('parentProductCategorySequenceNum',category?.parents[0]?.sequenceNum)</script>
            </iterate>
            <order-map-list list="searchOut?.documentList">
                <order-by field-name="parentProductCategorySequenceNum"/>
            </order-map-list>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>

            <set field="psdata" from="[ menuItems:[] ]"/>
            <iterate list="searchOut?.documentList" entry="category">
                    <script>psdata.menuItems.add([
                            id: category?.productCategoryId,
                            slug: category?.identifications?.find{it.identTypeEnumId == 'PcitUrlSlug'}?.idValue ?: category?.productCategoryId,
                            label: category?.categoryName
                    ]);</script>
            </iterate>

<!--            <log level="warn" message="get#LightBootstrap"/>-->
        </actions>
    </service>
    <service verb="get" noun="FeaturedProducts">
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <!-- Best Selling (Featured) Category -->
            <set field="dataDocument" from="productStore?.storeDataDocuments?.find{it.typeEnumId == 'PsdtProduct'}?.dataDocument"/>
            <set field="queryString" value="*"/>
            <set field="storeCategoryTypeEnumId" value="PsctFeatured"/>
            <script><![CDATA[
                nestedQueryMap = [categories:"""{
							"bool": {
								"must": [
									{
										"range": {
											"categories.categoryFromDate": {
												"lte": ${ec.user.nowTimestamp.time}
											}
										}
									},
									{
										"bool": {
											"should": [
												{
													"range": {
														"categories.categoryThruDate": {
															"gte": ${ec.user.nowTimestamp.time}
														}
													}
												},
												{
													"bool": {
														"must_not": {
															"exists": {
																"field": "categories.categoryThruDate"
															}
														}
													}
												}
											]
										}
									},
									{
										"nested": {
											"path": "categories.stores",
											"query": {
												"bool": {
													"must": [
														{
															"match": {
																"categories.stores.productStoreId": "${productStoreId}"
															}
														},
														{
															"match": {
																"categories.stores.storeCategoryTypeEnumId": "${storeCategoryTypeEnumId}"
															}
														},
														{
															"range": {
																"categories.stores.storeCategoryFromDate": {
																	"lte": ${ec.user.nowTimestamp.time}
																}
															}
														},
														{
															"bool": {
																"should": [
																	{
																		"range": {
																			"categories.stores.storeCategoryThruDate": {
																				"gte": ${ec.user.nowTimestamp.time}
																			}
																		}
																	},
																	{
																		"bool": {
																			"must_not": {
																				"exists": {
																					"field": "categories.stores.storeCategoryThruDate"
																				}
																			}
																		}
																	}
																]
															}
														}
													]
												}
											}
										}
									}
								]
							}
                    }"""]
                ]]></script>
            <service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="searchOut"
                          in-map="[queryString:queryString, nestedQueryMap:nestedQueryMap, indexName:dataDocument?.indexName,
                        documentType:dataDocument.dataDocumentId, pageIndex:pageIndex, pageSize:pageSize, flattenDocument:false]"/>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>

            <set field="psdata" from="[]"/>
            <iterate list="searchOut?.documentList" entry="product">

                <!-- TODO: Get prices from mantle.product.PriceServices.get#ProductPrice to the Product DataDocument with productStoreId, vendorPartyId, and customerPartyId parameters exported -->
                <script>psdata.add([
                        id_product: product?.productId,
                        name: product?.name,
                        link_rewrite: product?.otherIdentifications?.find{it.otherIdentProductIdTypeEnumId == 'PidtUrlSlug'}?.otherIdentIdValue,
                        regular_price_amount: product?.prices?.find{it.priceTypeEnumId == 'PptList'}?.price ?: product?.prices?.find{it.priceTypeEnumId == 'PptCurrent'}?.price,
                        price_amount: product?.prices?.find{it.priceTypeEnumId == 'PptCurrent'}?.price,
                        cover: [url: "${ec.web.requestUrl.minus(ec.web.request.requestURI)}/store/content/productImage/${product?.contents?.find{it.productContentTypeEnumId == 'PcntImageLarge'}?.productContentId ?: product?.contents?.find{it.productContentTypeEnumId == 'PcntImageMedium'}?.productContentId ?: product?.contents?.find{it.productContentTypeEnumId == 'PcntImageSmall'}?.productContentId ?: product?.contents?.find{it.productContentTypeEnumId == 'PcntImageOriginal'}?.productContentId}"],
                        is_virtual: product.productTypeEnumId=='PtVirtual'
                ]);</script>
            </iterate>

<!--            <log level="warn" message="get#FeaturedProducts"/>-->
        </actions>
    </service>
    <service verb="get" noun="CategoryProducts">
        <in-parameters>
            <parameter name="id_category"/>
            <parameter name="slug"/>
            <parameter name="q"/>
            <parameter name="page"/>
            <parameter name="with_all_images"/>
            <parameter name="with_category_tree"/>
            <parameter name="sortBy" default-value="sequenceNum"/>
            <!--            <parameter name="image_size"/>-->
            <!--            <parameter name="resultsPerPage"/>-->
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
<!--            <log level="warn" message="q ${q.split('-|/').minus(q.split('/').collect{it.split('-')}.collect{it[0]})}"/>-->

            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>
            <entity-find entity-name="mantle.product.category.ProductCategoryIdent" list="productCategoryIdentList">
                <econdition field-name="idValue" from="slug"/>
            </entity-find>

            <set field="categoryId" from="productCategoryIdentList?.getFirst()?.productCategoryId ?: slug"/>

            <service-call name="popstore.ProductServices.get#CategoryProducts" out-map="products"
                          in-map="[productCategoryId:categoryId, orderBy: sortBy, pageIndex:page?page-1: '0', pageSize:12]"/>

            <service-call name="popstore.StoreServices.get#StoreInfo" in-map="[productStoreId:productStoreId]" out-map="storeInfo"/>
            <set field="productStore" from="storeInfo.productStore"/>
            <set field="wikiSpaceId" from="productStore?.wikiSpaceId"/>

            <!-- lookup configured browse root category from storeInfo -->
            <set field="browseRootCategory" from="storeInfo.categoryByType.PsctBrowseRoot"/>
            <set field="browseRootCategoryId" from="browseRootCategory?.productCategoryId"/>
            <!-- get browseRootCategoryInfo for subCategoryList used in header, etc -->
            <if condition="browseRootCategoryId">
                <service-call name="popstore.ProductServices.get#CategoryInfo" out-map="browseRootCategoryInfo"
                              in-map="[productCategoryId:browseRootCategoryId]"/>
            </if>

            <!-- Get ProductFeatures for the Products in the ProductCategory Specified -->
            <if condition="!q">
                <then>
                    <set field="productsFiltered" from="products?.productList"/>
                    <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="pfaaList">
                        <date-filter/>
                        <econdition field-name="productId" operator="in" from="products?.productList?.productId"/>
                        <order-by field-name="typeDescription,sequenceNum,description"/>
                    </entity-find>
                </then>
                <else>
                    <set field="descriptionList" from="q.split('-|/').minus(q.split('/').collect{it.split('-')}.collect{it[0]})"/>
                    <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="pfaaList">
                        <date-filter/>
                        <econdition field-name="productId" operator="in" from="products?.productList?.productId"/>
                        <order-by field-name="typeDescription,sequenceNum,description"/>
                    </entity-find>
                    <set field="productsFiltered" from="[]"/>
                    <iterate list="products?.productList" entry="product">
                        <if condition="pfaaList?.productId?.contains(product.productId)">
                            <script>productsFiltered.add(product)</script>
                        </if>
                    </iterate>
                </else>
            </if>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <script>
                def moquiToPrestashopCategory(category) {
                    return [
                        id: category?.categoryId,
                        link: "https://moqui.org/en/0-${category?.categorySlug}",
                        name: category?.categoryName,
                        desc: category?.categoryDescription,
                        children: category?.subCategoryList?.collect { subCategory -> moquiToPrestashopCategory(subCategory) }
                    ]
                }
            </script>
            <set field="psdata" from="[
                products:[],
                pagination:[current_page: products?.productListPageIndex+1,
                total_items: products?.productListCount,
                pages_count: products?.productListPageMaxIndex+1],
                facets:[],
                categories:moquiToPrestashopCategory(browseRootCategoryInfo),
                sortOptions: [selected:sortBy, options:[
                    [id:'sequenceNum',value:'Sequence: Low to High'],
                    [id:'-sequenceNum',value:'Sequence: High to Low'],
                    [id:'fromDate',value:'Date: Old to New'],
                    [id:'-fromDate',value:'Date: New to Old']
                ]]
            ]"/>
            <iterate list="productsFiltered" entry="product">
                <script>psdata.products.add([
                    id_product: product?.productId,
                    name: product?.productName,
                    link_rewrite: product?.productSlug ?: product?.productId,
                    regular_price_amount: product?.listPrice,
                    price_amount: product?.price,
                    cover: [url: "${ec.web.requestUrl.minus(ec.web.request.requestURI).substring(0, ec.web.requestUrl.minus(ec.web.request.requestURI).lastIndexOf('?'))}/store/content/productImage/${product?.mediumImageInfo?.productContentId ?: product?.smallImageInfo?.productContentId}"],
                    is_virtual: product?.isVirtual
                ]);</script>
            </iterate>
            <iterate list="pfaaList" entry="productFeatureAndAppl">
                <if condition="!psdata?.facets?.find{it.id == productFeatureAndAppl.productFeatureTypeEnumId}">
                    <script>psdata.facets.add([
                        id: productFeatureAndAppl?.productFeatureTypeEnumId,
                        displayed: true,
                        label: productFeatureAndAppl?.typeDescription,
                        filters: [],
                        multipleSelectionAllowed: true,
                        widgetType: "checkbox"
                        ]);</script>
                </if>
                <if condition="!psdata?.facets?.find{it.id == productFeatureAndAppl.productFeatureTypeEnumId}.filters.find{it.id == productFeatureAndAppl?.productFeatureId}">
                    <script>psdata?.facets?.find{it.id == productFeatureAndAppl.productFeatureTypeEnumId}.filters.add([
                        id: productFeatureAndAppl?.productFeatureId,
                        label: productFeatureAndAppl?.description,
                        type: "attribute_group",
                        active: false,
                        magnitude: pfaaList?.productFeatureId?.findAll{it == productFeatureAndAppl?.productFeatureId}.size()
                        ]);</script>
                </if>
            </iterate>

<!--            <log level="warn" message="get#CategoryProducts"/>-->
        </actions>
    </service>
    <service verb="get" noun="ProductDetail">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="product_id"/>
            <parameter name="image_type"/>
            <parameter name="refresh"/>
            <parameter name="id_customization"/>
            <parameter name="group" type="Map"/>
            <parameter name="with_all_images"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="groupMap" from="group"/>

            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <set field="productId" from="product_id"/>

            <service-call name="popstore.ProductServices.get#ProductInfo" out-map="product" in-map="[productId:productId]"/>
            <service-call name="popstore.ProductServices.get#ProductVariantsDisplayInfo" out-map="product" in-map="[productId:productId]"/>

            <set field="variantOptionList" from="[]"/>
            <!-- This list should only have one value, but it may have more if there are more than 3 attributes or duplicates of attributes -->
            <set field="variantOptionSelectedList" from="[]"/>
            <iterate list="product.variantOptions" entry="variantOption">
                <script>variantOptionOut = variantOption.item</script>
                <script>variantOptionList.add(variantOptionOut)</script>
                <if condition="group &amp;&amp; group[variantOptionOut.productFeatureTypeEnumId] == variantOptionOut.productFeatureId">
                    <set field="_variantOptionSelectedList" from="product.variantOptions.findAll{it.item.productId == variantOptionOut.productId
                        &amp;&amp; it.item.productFeatureTypeEnumId != variantOptionOut.productFeatureTypeEnumId
                        &amp;&amp; group[it.item.productFeatureTypeEnumId] == it.item.productFeatureId}?.item"/>
                    <script>variantOptionSelectedList += _variantOptionSelectedList</script>
                </if>
            </iterate>

            <entity-find entity-name="mantle.product.feature.ProductFeatureAndAppl" list="pfaaList">
                <date-filter/>
                <econdition field-name="productId" from="product?.productId"/>
                <order-by field-name="typeDescription,sequenceNum,description"/>
            </entity-find>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="imageUrl" value="${ec.web.requestUrl.minus(ec.web.request.requestURI).substring(0, ec.web.requestUrl.minus(ec.web.request.requestURI).lastIndexOf('?'))}/store/content/productImage/${product?.contentList?.getFirst()?.productContentId}"/>
            <set field="psdata" from="[
                id_product: product?.productId,
                slug: product?.productId,
                name: product?.productName,
                float_price: variantOptionSelectedList[0]?.prices?.listPrice ?: product?.listPrice,
                discount_price: variantOptionSelectedList[0]?.prices?.price ?: product?.price,
                images: [],
                cover_image: imageUrl,
                description: product?.descriptionLong,
                description_short: product?.descriptionSmall ?: product?.description ?: product?.descriptionLong,
                product_info: [],
                manufacturer_name: 'Brand Manufacture Name',
                category_name: 'Category Name',
                is_virtual: product?.productTypeEnumId == 'PtVirtual',
                groups: pfaaList?.productFeatureTypeEnumId?.groupBy{it}
                ]"/>
            <iterate list="variantOptionSelectedList[0]?.contentList ?: product?.contentList" entry="content">
                <if condition="content?.productContentId &amp;&amp; content?.productContentTypeEnumId?.contains('Image')">
                    <script>psdata.images.add(src: "${ec.web.requestUrl.minus(ec.web.request.requestURI).substring(0, ec.web.requestUrl.minus(ec.web.request.requestURI).lastIndexOf('?'))}/store/content/productImage/${content?.productContentId}")</script>
                </if>
            </iterate>
            <iterate list="psdata.groups" entry="group">
                <set field="psdata.groups[group.key]" from="[
                    name: pfaaList?.find{it.productFeatureTypeEnumId == group.key}?.typeDescription,
                    group_type: 'select',
                    attributes: pfaaList?.findAll{it.productFeatureTypeEnumId == group.key}?.productFeatureId?.groupBy{it}
                    ]"/>
                <iterate list="psdata.groups[group.key].attributes" entry="attribute">
                    <set field="psdata.groups[group.key].attributes[attribute.key]" from="[
                        name: pfaaList?.find{it.productFeatureId == attribute.key}?.description,
                        selected: groupMap?.find{it.key == group.key}?.value?.contains(attribute.key) ?: false
                        ]"/>
<!--                    <log level="warn" message="groupMap?.find{it.key == group.key}?.value?.contains(attribute.key) ${groupMap?.find{it.key == group.key}?.value?.contains(attribute.key)}"/>-->
                </iterate>
            </iterate>

<!--            <log level="warn" message="get#ProductDetail"/>-->
        </actions>
    </service>
    <service verb="list" noun="Comments">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="id_product"/>
            <parameter name="page"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <set field="productId" from="id_product"/>
            <service-call name="popstore.ProductServices.get#ProductReviews" out-map="reviewsList" in-map="[productId:productId]"/>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="psdata" from="[ comments_nb:reviewsList?.productReviewList?.size(), comments_per_page: '5', comments:[]]"/>
            <iterate list="reviewsList?.productReviewList" entry="review">
                <if condition="review?.userId">
                    <entity-find-one entity-name="mantle.party.PersonAndUserAccount" value-field="personUserAccount">
                        <field-map field-name="userId" from="review.userId"/>
                    </entity-find-one>
                </if>
                <script>psdata.comments.add([
                    id_product_comment: review?.productReviewId,
                    firstname: personUserAccount?.firstName ?: 'Anonymous',
                    lastname: personUserAccount?.lastName ?: '',
                    date_add: ec.l10n.format(review?.postedDateTime,'MM/dd/yy hh:mm a'),
                    content: review?.productReview,
                    grade: review?.productRating
                    ])</script>
            </iterate>

<!--            <log level="warn" message="list#Comments"/>-->
        </actions>
    </service>
    <service verb="post" noun="Comments">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="id_product"/>
            <parameter name="comment_title"/>
            <parameter name="comment_content"/>
            <parameter name="criterion" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <set field="productId" from="id_product"/>
            <set field="productRating" from="criterion['1']"/>
            <set field="productReview" from="comment_content"/>

            <!-- TODO: Add more review errors. -->
            <if condition="!productReview"><return message="Missing a Review Comment" type="danger" error="true"/></if>

            <service-call name="popstore.ProductServices.create#ProductReview" in-map="context"/>

            <!-- Start Prestashop Stuff -->
            <set field="success" from="true"/>
            <set field="code" from="200"/>
            <service-call name="popstore.PrestashopServices.list#Comments" in-map="[id_product:productId]" out-map="context"/>

<!--            <log level="warn" message="post#Comments"/>-->
        </actions>
    </service>
    <service verb="get" noun="ProductSearch">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="s"/>
            <parameter name="resultsPerPage"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <set field="searchParameter" from="s"/>
            <if condition="searchParameter">
                <service-call name="popstore.SearchServices.search#All" out-map="context"
                              in-map="[searchParameter:searchParameter, productStoreId:productStoreId, pageIndex:pageIndex ? pageIndex : '0', pageSize:resultsPerPage?:'12']"/>
            </if>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="psdata" from="[ products:[] ]"/>
            <iterate list="productSearchResults?.productList" entry="product">
                <script>psdata.products.add([
                    id_product: product?.productId,
                    name: product?.productName,
                    link_rewrite: product?.productId,
                    regular_price_amount: product?.listPrice,
                    price_amount: product?.price,
                    cover: [url: "${ec.web.requestUrl.minus(ec.web.request.requestURI).substring(0, ec.web.requestUrl.minus(ec.web.request.requestURI).lastIndexOf('?'))}/store/content/productImage/${product?.mediumImageInfo?.productContentId ?: product?.smallImageInfo?.productContentId}"],
                    is_virtual: product?.productTypeEnumId=='PtVirtual'
                ]);</script>
            </iterate>

<!--            <log level="warn" message="get#ProductSearch"/>-->
        </actions>
    </service>
    <service verb="get" noun="AddressForm">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="s"/>
            <parameter name="resultsPerPage"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <entity-find entity-name="moqui.basic.Geo" list="geoList">
                <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY"/>
                <order-by field-name="geoName"/>
            </entity-find>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="psdata" from="[ countries: geoList.geoId.groupBy{it} ]"/>
            <iterate list="psdata.countries" entry="country">
                <service-call name="org.moqui.impl.BasicServices.get#GeoRegionsForDropDown"
                              in-map="[geoId:country.key]" out-map="regionList"/>

                <set field="statesList" from="[]"/>
                <iterate list="regionList?.resultList" entry="region">
                    <script>statesList.add([
                        id_state: region.geoId,
                        name: region.geoName
                        ])</script>
                </iterate>

                <set field="psdata.countries[country.key]" from="[
                    id_country: country.key,
                    name: geoList?.find{it.geoId == country.key}?.geoName,
                    states: statesList,
                    zip_code_format: 'NNNNN',
                    need_zip_code: '1'
                ]"/>
            </iterate>

<!--            <log level="warn" message="get#AddressForm"/>-->
        </actions>
    </service>
    <service verb="get" noun="Cart">
        <in-parameters>
            <parameter name="update"/>
            <parameter name="id_product"/>
            <parameter name="id_product_attribute"/>
            <parameter name="attributes" type="Map"/>
            <parameter name="delete"/>
            <parameter name="op"/>
            <parameter name="action"/>
            <parameter name="image_size"/>
            <parameter name="qty" type="Integer"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <set field="productId" from="id_product"/>
            <set field="attributesMap" from="attributes"/>

            <if condition="productId">
                <service-call name="popstore.ProductServices.get#ProductVariantsDisplayInfo" out-map="product" in-map="[productId:productId]"/>
                <set field="variantOptionList" from="[]"/>
                <!-- This list should only have one value, but it may have more if there are more than 3 attributes or duplicates of attributes -->
                <set field="variantOptionSelectedList" from="[]"/>
                <iterate list="product?.variantOptions" entry="variantOption">
                    <script>variantOptionOut = variantOption.item</script>
                    <script>variantOptionList.add(variantOptionOut)</script>
                    <if condition="attributes &amp;&amp; attributes[variantOptionOut.productFeatureTypeEnumId] == variantOptionOut.productFeatureId">
                        <set field="_variantOptionSelectedList" from="product.variantOptions.findAll{it.item.productId == variantOptionOut.productId
                        &amp;&amp; attributes[it.item.productFeatureTypeEnumId] == it.item.productFeatureId}?.item"/>
                        <script>variantOptionSelectedList += _variantOptionSelectedList</script>
                    </if>
                </iterate>
                <set field="productId" from="variantOptionSelectedList[0]?.productId ?: productId"/>
            </if>

            <service-call name="popstore.CartServices.get#CartInfo" out-map="context"/>
            <set field="quantity" from="qty ?: 0"/>

            <if condition="update == '1' &amp;&amp; op != 'down'">
                <then>
                    <service-call name="popstore.CartServices.add#Product" out-map="context"
                                  in-map="[productId:productId, quantity:quantity, currencyUomId:currencyUomId, productStoreId: productStoreId]"/>
                </then>
                <else-if condition="update == '1' &amp;&amp; op == 'down'">
                    <service-call name="popstore.CartServices.remove#Product" out-map="context"
                                  in-map="[productId:productId, quantity:quantity, currencyUomId:currencyUomId, productStoreId: productStoreId]"/>
                </else-if>
                <else-if condition="delete == '1'">
                    <service-call name="popstore.CartServices.remove#Product" out-map="context"
                                  in-map="[productId:productId, quantity:0, addToQuantity:false, currencyUomId:currencyUomId, productStoreId: productStoreId]"/>
                </else-if>
            </if>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="psdata" from="[ products:[] ]"/>
            <iterate list="orderItemList" entry="orderItem">
                <service-call name="popstore.ProductServices.get#ProductInfo" out-map="product" in-map="[productId:orderItem.productId]"/>
                <set field="imageUrl" value="${ec.web.requestUrl.minus(ec.web.request.requestURI).substring(0, ec.web.requestUrl.minus(ec.web.request.requestURI).lastIndexOf('?'))}/store/content/productImage/${product?.contentList?.getFirst()?.productContentId}"/>
                <script>psdata.products.add([
                    id_product: orderItem?.productId,
                    id_product_attribute: orderItem?.productId,
                    attributes_array: [],
                    name: orderItem?.itemDescription,
                    image_url: imageUrl,
                    price_without_reduction: (orderItem?.unitListPrice?:0)*orderItem?.quantity,
                    price: (orderItem?.unitAmount?:0)*orderItem?.quantity,
                    cart_quantity: orderItem?.quantity,
                    reference: orderItem?.productId
                    ]);</script>
            </iterate>

<!--            <log level="warn" message="get#Cart"/>-->
        </actions>
    </service>

    <service verb="register" noun="Customer">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="email"><text-email/></parameter>
            <parameter name="firstName"/>
            <parameter name="lastName"/>
            <parameter name="password"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="emailAddress" from="email"/>
            <set field="newPassword" from="password"/>
            <set field="newPasswordVerify" from="password"/>
            <service-call name="popstore.CustomerServices.register#Customer" in-map="context" out-map="customerMap"/>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="psdata" from="[
                registered: customerMap?.customerInfo?.partyId != null,
                message: 'User registered successfully',
                customer_id:customerMap?.customerInfo?.partyId,
                session_data:ec.web.sessionToken
            ]"/>

<!--            <log level="warn" message="register#Customer ${data}"/>-->
        </actions>
    </service>
    <service verb="login" noun="Customer">
        <in-parameters>
            <parameter name="email"><text-email/></parameter>
            <parameter name="username" required="true" default="email"/>
            <parameter name="password" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="emailAddress" from="email"/>
            <set field="username" from="emailAddress"/>
            <service-call name="popstore.CustomerServices.login#Customer" in-map="context" out-map="customerMap"/>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <entity-find-one entity-name="mantle.party.PersonAndUserAccount" value-field="personUser" auto-field-map="[partyId:ec.user?.userAccount?.partyId]"/>
            <set field="psdata" from="[
                registered: customerMap?.customerInfo?.partyId != null,
                message: 'User registered successfully',
                customer_id:customerMap?.customerInfo?.partyId,
                session_data:ec.web.sessionToken,
                user: [
                    firstname: personUser?.firstName,
                    lastname: personUser?.lastName,
                    email: ec.user?.userAccount?.emailAddress,
                    id_gender: personUser?.gender ? (personUser?.gender == 'Y' ? 1 : 0 ) : null
                ]
            ]"/>

<!--            <log level="warn" message="login#Customer"/>-->
        </actions>
    </service>
    <service verb="reset" noun="Password">
        <in-parameters>
            <parameter name="email"/>
            <parameter name="username" default="email"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="emailAddress" from="email"/>
            <set field="username" from="emailAddress"/>
            <service-call name="popstore.CustomerServices.login#Customer" in-map="context" out-map="customerMap"/>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <entity-find-one entity-name="mantle.party.PersonAndUserAccount" value-field="personUser" auto-field-map="[partyId:ec.user?.userAccount?.partyId]"/>
            <set field="psdata" from="[
                registered: customerMap?.customerInfo?.partyId != null,
                message: 'User registered successfully',
                customer_id:customerMap?.customerInfo?.partyId,
                session_data:ec.web.sessionToken,
                user: [
                    firstname: personUser?.firstName,
                    lastname: personUser?.lastName,
                    email: ec.user?.userAccount?.emailAddress,
                    id_gender: personUser?.gender ? (personUser?.gender == 'Y' ? 1 : 0 ) : null
                ]
            ]"/>

<!--            <log level="warn" message="reset#Password"/>-->
        </actions>
    </service>
    <service verb="logout" noun="Customer" authenticate="anonymous-all">
        <actions>
            <script>ec.user.logoutUser()</script>
<!--            <log level="warn" message="logout#Customer"/>-->
        </actions>
    </service>
    <service verb="get" noun="AccountInfo">
        <in-parameters>
            <parameter name="menu_with_images"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>

            <entity-find-one entity-name="mantle.party.PersonAndUserAccount" value-field="personUser" auto-field-map="[partyId:ec.user?.userAccount?.partyId]"/>

            <set field="psdata" from="[
                firstname: personUser?.firstName,
                lastname: personUser?.lastName,
                email: ec.user?.userAccount?.emailAddress,
                id_gender: personUser?.gender ? (personUser?.gender == 'Y' ? 1 : 2 ) : null
            ]"/>

<!--            <log level="warn" message="get#AccountInfo"/>-->
        </actions>
    </service>
    <service verb="post" noun="AccountEdit">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="email"><text-email/></parameter>
            <parameter name="firstName"/>
            <parameter name="lastName"/>
            <parameter name="password"/>
            <parameter name="gender"/>
            <parameter name="new_password"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="emailAddress" from="email"/>
            <set field="username" from="emailAddress"/>
            <set field="gender" from="gender ? (gender == 1 ? 'Y' : 'N') : null"/>

            <!-- Logging in to handle errors and verify password -->
            <script>ec.user.loginUser(username, password)</script>

            <if condition="new_password">
                <then>
                    <set field="oldPassword" from="password"/>
                    <set field="newPassword" from="new_password"/>
                    <set field="newPasswordVerify" from="new_password"/>
                    <service-call name="org.moqui.impl.UserServices.update#Password" in-map="context"/>
                </then><else>
                    <service-call name="popstore.CustomerServices.update#Customer" in-map="context" out-map="customerMap"/>
                </else>
            </if>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="psdata" from="[
                registered: customerMap?.customerInfo?.partyId != null,
                message: ec.message.messages[0] ?: 'User updated successfully',
                customer_id:customerMap?.customerInfo?.partyId,
                session_data:ec.web.sessionToken
            ]"/>

<!--            <log level="warn" message="post#AccountEdit"/>-->
        </actions>
    </service>
    <service verb="get" noun="OrderHistory">
        <in-parameters>
            <parameter name="id_order"/>
            <parameter name="menu_with_images"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="orderId" from="id_order"/>
            <set field="orderItemList" from="[]"/>
            <if condition="orderId">
                <then><service-call name="popstore.CartServices.get#OrderInfo" in-map="[orderId:orderId]" out-map="context"/></then>
                <else><service-call name="popstore.CartServices.get#CustomerOrders" out-map="context"/></else>
            </if>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="psdata" from="[]"/>
            <if condition="orderId">
                <then>
                    <entity-find-one entity-name="moqui.basic.StatusItem" auto-field-map="[statusId:orderPart.statusId]" value-field="statusItem" cache="true"/>
                    <set field="orderItemSeqIdList" from="[]"/>

                    <set field="orderItemNormalList" from="[:]"/>
                    <iterate list="orderItemList" entry="orderItem">
                        <script>orderItemNormalList.put(orderItem.orderItemSeqId,orderItem.orderItemSeqId)</script>
                    </iterate>

                    <set field="psdata" from="[
                        id_order: orderId,
                        date_add: ec.l10n.format(orderHeader.entryDate,'yyyy-MM-dd HH:mm:ss'),
                        order_state: statusItem?.description ?: orderPart.statusId,
                        total_paid: totalUnpaid,
                        products: orderItemNormalList
                    ]"/>

                    <iterate list="psdata.products" entry="orderItemMap">
                        <filter-map-list list="orderItemList" to-list="orderItemFilteredList">
                            <field-map field-name="orderItemSeqId" from="orderItemMap.value"/>
                        </filter-map-list>
                        <set field="orderItem" from="orderItemFilteredList[0]"/>

                        <set field="psdata.products[orderItemMap.key]" from="[
                            id_product: orderItem?.productId,
                            product_name: orderItem?.itemDescription,
                            quantity: orderItem?.quantity,
                            product_price: orderItem?.unitAmount,
                            link_rewrite: orderItem?.productId
                        ]"/>
                    </iterate>
                </then><else>
                    <iterate list="orderInfoList" entry="orderInfo">
                        <entity-find-one entity-name="moqui.basic.StatusItem" auto-field-map="[statusId:orderInfo.partStatusId]" value-field="statusItem" cache="true"/>
                        <script>psdata.add([
                            id_order: orderInfo.orderId,
                            date_add: ec.l10n.format(orderInfo.entryDate,'yyyy-MM-dd HH:mm:ss'),
                            order_state: statusItem?.description ?: orderInfo.partStatusId,
                            total_paid: orderInfo.partTotal,
                            orderDetails: []
                            ])</script>
                    </iterate>
            </else></if>

<!--            <log level="warn" message="get#OrderHistory"/>-->
        </actions>
    </service>
    <service verb="get" noun="AllAddresses">
        <in-parameters>
            <parameter name="menu_with_images"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.CustomerServices.get#ShippingAddresses" out-map="context"/>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>

            <set field="psdata" from="postalAddressList?.postalContactMechId?.groupBy{it}"/>
            <iterate list="psdata" entry="postalAddressListItem">
                <set field="postalAddress" from="postalAddressList?.find{it.postalContactMechId == postalAddressListItem.key}"/>
                <set field="psdata[postalAddressListItem.key]" from="[
                    id: postalAddress?.postalContactMechId,
                    alias: postalAddress?.postalAddress?.attnName,
                    address1: postalAddress?.postalAddress?.address1,
                    postcode: postalAddress?.postalAddress?.postalCode,
                    city: postalAddress?.postalAddress?.city,
                    id_state: postalAddress?.postalAddressStateGeo?.geoId,
                    state: postalAddress?.postalAddressStateGeo?.geoName,
                    id_country: postalAddress?.postalAddress?.countryGeoId,
                    country: postalAddress?.postalAddressCountryGeo?.geoName,
                    phone: postalAddress?.telecomNumber
                ]"/>
            </iterate>

<!--            <log level="warn" message="get#AllAddresses"/>-->
        </actions>
    </service>
    <service verb="post" noun="Address">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="id_address"/>
            <parameter name="alias"/>
            <parameter name="postcode"/>
            <parameter name="address1"/>
            <parameter name="id_country"/>
            <parameter name="country"/>
            <parameter name="id_state"/>
            <parameter name="city"/>
            <parameter name="company"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="postalContactMechId" from="id_address"/>
            <set field="postalCode" from="postcode"/>
            <set field="countryGeoId" from="id_country"/>
            <set field="stateProvinceGeoId" from="id_state"/>
            <set field="attnName" from="alias"/>
            <service-call name="popstore.CustomerServices.store#ShippingAddress" in-map="context" out-map="context"/>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>

            <service-call name="popstore.PrestashopServices.get#AllAddresses" out-map="context"/>
            <set field="message" value="Successfully added address"/>

<!--            <log level="warn" message="post#Address"/>-->
        </actions>
    </service>
    <service verb="delete" noun="Address">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="id_address"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <set field="contactMechId" from="id_address"/>
            <service-call name="popstore.CustomerServices.delete#ShippingAddress" in-map="context" out-map="context"/>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="message" value="Successfully deleted address"/>
            <set field="psdata" from="[
                    id: null,
                    alias: null,
                    address1: null,
                    postcode: null,
                    city: null,
                    id_state: null,
                    state: null,
                    id_country: null,
                    country: null,
                    phone: null
                ]"/>

<!--            <log level="warn" message="delete#Address"/>-->
        </actions>
    </service>
    <service verb="set" noun="AddressCheckout">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="id_address"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>

            <set field="postalContactMechId" from="id_address"/>
            <entity-find entity-name="OrderPart" list="orderPartList">
                <econdition field-name="orderId" from="cartOrderId"/>
                <date-filter from-field-name="validFromDate" thru-field-name="validThruDate"/>
            </entity-find>

            <!-- TODO: Handle edge cases -->
            <iterate list="orderPartList" entry="orderPart">
                <if condition="orderPart.postalContactMechId != postalContactMechId">
                    <set field="orderPart.postalContactMechId" from="postalContactMechId"/>
                    <entity-update value-field="orderPart"/>
                </if>
            </iterate>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="psdata" from="[:]"/>

<!--            <log level="warn" message="set#AddressCheckout"/>-->
        </actions>
    </service>
    <service verb="get" noun="Carriers">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ShippingOptions" out-map="context"/>

            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader" auto-field-map="[orderId:cartOrderId]"/>

            <!-- Start Prestashop Stuff -->
            <!--            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopAddress.json',false))"/>-->
            <set field="code" from="200"/>
            <set field="psdata" from="[:]"/>
            <iterate list="shippingOptions" entry="shippingOption">
                <script>psdata.put("${shippingOption.carrierPartyId}:${shippingOption.shipmentMethodEnumId}", [
                    id: shippingOption.shipmentMethodEnumId,
                    name: shippingOption.carrierName &amp;&amp; shippingOption.carrierName != '_NA_' ? shippingOption.carrierName + ' : ' + shippingOption.shipmentMethodDescription : shippingOption.shipmentMethodDescription,
                    delay: ec.l10n.formatCurrency(shippingTotal, orderHeader?.currencyUomId ?: 'USD') ?: 'FREE'
                    ])</script>
            </iterate>

<!--            <log level="warn" message="get#Carriers"/>-->
        </actions>
    </service>
    <service verb="set" noun="CarrierCheckout">
        <in-parameters>
            <!-- Prestashop Only API Attributes -->
            <parameter name="id_address" required="true"/>
            <parameter name="id_carrier" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.CartServices.get#ActiveOrderAndCustomer" out-map="context"/>

            <set field="postalContactMechId" from="id_address"/>
            <set field="shipmentMethodEnumId" from="id_carrier"/>
            <entity-find entity-name="OrderPart" list="orderPartList">
                <econdition field-name="orderId" from="cartOrderId"/>
                <econdition field-name="postalContactMechId"/>
                <date-filter from-field-name="validFromDate" thru-field-name="validThruDate"/>
            </entity-find>

            <!-- TODO: Handle edge cases -->
            <iterate list="orderPartList" entry="orderPart">
                <if condition="orderPart.shipmentMethodEnumId != shipmentMethodEnumId">
                    <set field="orderPart.shipmentMethodEnumId" from="shipmentMethodEnumId"/>
                    <entity-update value-field="orderPart"/>
                </if>
            </iterate>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="psdata" from="[:]"/>

<!--            <log level="warn" message="set#AddressCheckout"/>-->
        </actions>
    </service>
    <service verb="get" noun="PaymentOptions">
        <in-parameters>
            <parameter name="requestHostName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <service-call name="popstore.PrestashopServices.get#ProductStoreId" in-map="[requestHostName:requestHostName]" out-map="context"/>

            <entity-find entity-name="mantle.product.store.ProductStorePaymentGateway" list="storePaymentGatewayList">
                <econdition field-name="productStoreId" value="${productStoreId}" />
            </entity-find>

            <!-- Start Prestashop Stuff -->
            <set field="code" from="200"/>
            <set field="psdata" from="[:]"/>
            <iterate list="storePaymentGatewayList" entry="storePaymentGateway">
                <entity-find-one entity-name="moqui.basic.Enumeration" value-field="paymentInstrument" auto-field-map="[enumId:storePaymentGateway.paymentInstrumentEnumId]"/>
                <script>psdata.put(paymentInstrument.enumId, [
                    id: paymentInstrument.enumId,
                    call_to_action_text: paymentInstrument.description,
                    module_name: paymentInstrument.enumId
                    ])</script>
            </iterate>

<!--            <log level="warn" message="get#PaymentOptions"/>-->
        </actions>
    </service>
    <service verb="place" noun="Order">
        <in-parameters>
<!--            <parameter name="enumId"/>-->
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="code" type="Integer"/>
            <parameter name="psdata" type="Map"/>
        </out-parameters>
        <actions>
            <!-- TODO: This needs to actually send user's data for processing orders -->
            <service-call name="popstore.CartServices.place#CartOrder" in-map="[cardSecurityCodeByPaymentId:[100000:555]]" out-map="context"/>

            <!-- Start Prestashop Stuff -->
            <!--            <set field="data" from="ec.elastic.jsonToObject(ec.resource.getLocationText('component://PopRestStore/data/PrestashopAddress.json',false))"/>-->
            <set field="code" from="200"/>
            <set field="psdata" from="[:]"/>

<!--            <log level="warn" message="place#Order"/>-->
        </actions>
    </service>
</services>

